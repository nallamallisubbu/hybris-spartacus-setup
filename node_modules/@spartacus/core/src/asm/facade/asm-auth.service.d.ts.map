{"version":3,"file":"asm-auth.service.d.ts","sources":["asm-auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { UserToken } from '../../auth/models/token-types.model';\r\nimport { StateWithAsm } from '../store/asm-state';\r\nexport declare class AsmAuthService {\r\n    protected store: Store<StateWithAsm>;\r\n    protected authService: AuthService;\r\n    constructor(store: Store<StateWithAsm>, authService: AuthService);\r\n    /**\r\n     * Loads a user token for a customer support agent\r\n     * @param userId\r\n     * @param password\r\n     */\r\n    authorizeCustomerSupportAgent(userId: string, password: string): void;\r\n    /**\r\n     * Starts an ASM customer emulation session.\r\n     * A customer emulation session is stoped by calling logout().\r\n     * @param customerSupportAgentToken\r\n     * @param customerId\r\n     */\r\n    startCustomerEmulationSession(customerSupportAgentToken: UserToken, customerId: string): void;\r\n    /**\r\n     * Utility function to determine if a given token is a customer emulation session token.\r\n     * @param userToken\r\n     */\r\n    isCustomerEmulationToken(userToken: UserToken): boolean;\r\n    /**\r\n     * Returns the customer support agent's token\r\n     */\r\n    getCustomerSupportAgentToken(): Observable<UserToken>;\r\n    /**\r\n     * Returns the customer support agent's token loading status\r\n     */\r\n    getCustomerSupportAgentTokenLoading(): Observable<boolean>;\r\n    /**\r\n     * Logout a customer support agent\r\n     */\r\n    logoutCustomerSupportAgent(): void;\r\n}\r\n"]}