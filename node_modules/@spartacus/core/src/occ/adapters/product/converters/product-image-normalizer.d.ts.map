{"version":3,"file":"product-image-normalizer.d.ts","sources":["product-image-normalizer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OccConfig } from '../../../config/occ-config';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\nimport { Converter } from '../../../../util/converter.service';\r\nimport { Product } from '../../../../model/product.model';\r\nimport { Images } from '../../../../model/image.model';\r\nexport declare class ProductImageNormalizer implements Converter<Occ.Product, Product> {\r\n    protected config: OccConfig;\r\n    constructor(config: OccConfig);\r\n    convert(source: Occ.Product, target?: Product): Product;\r\n    /**\r\n     * @desc\r\n     * Creates the image structure we'd like to have. Instead of\r\n     * having a single list with all images despite type and format\r\n     * we create a proper structure. With that we can do:\r\n     * - images.primary.thumnail.url\r\n     * - images.GALLERY[0].thumnail.url\r\n     */\r\n    normalize(source: Occ.Image[]): Images;\r\n    /**\r\n     * Traditionally, in an on-prem world, medias and other backend related calls\r\n     * are hosted at the same platform, but in a cloud setup, applications are are\r\n     * typically distributed cross different environments. For media, we use the\r\n     * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\r\n     * if none provided.\r\n     */\r\n    private normalizeImageUrl;\r\n}\r\n"]}