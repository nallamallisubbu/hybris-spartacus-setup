{"version":3,"file":"occ-config-loader.service.d.ts","sources":["occ-config-loader.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { StateKey, TransferState } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\nimport { I18nConfig } from '../../i18n/config/i18n-config';\r\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\r\nimport { OccLoadedConfig } from './occ-loaded-config';\r\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\r\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\r\nexport declare const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string>;\r\nexport declare class OccConfigLoaderService {\r\n    protected platform: any;\r\n    protected document: any;\r\n    protected config: any;\r\n    protected sitesConfigLoader: OccSitesConfigLoader;\r\n    protected converter: OccLoadedConfigConverter;\r\n    protected transferState: TransferState;\r\n    protected serverRequestUrl?: string;\r\n    constructor(platform: any, document: any, config: any, sitesConfigLoader: OccSitesConfigLoader, converter: OccLoadedConfigConverter, transferState: TransferState, serverRequestUrl?: string);\r\n    private get currentUrl();\r\n    /**\r\n     * Initializes the Spartacus config asynchronously basing on the external config\r\n     */\r\n    loadConfig(): Promise<I18nConfig | SiteContextConfig>;\r\n    /**\r\n     * Returns the external config\r\n     */\r\n    protected get(): Observable<OccLoadedConfig>;\r\n    /**\r\n     * Loads the external config from backend\r\n     */\r\n    protected load(): Observable<OccLoadedConfig>;\r\n    /**\r\n     * Tries to rehydrate external config in the browser from SSR\r\n     */\r\n    protected rehydrate(): OccLoadedConfig;\r\n    /**\r\n     * Transfers the given external config in SSR to the browser\r\n     *\r\n     * @param externalConfig\r\n     */\r\n    protected transfer(externalConfig: OccLoadedConfig): void;\r\n    protected getConfigChunks(externalConfig: OccLoadedConfig): (I18nConfig | SiteContextConfig)[];\r\n    private shouldReturnI18nChunk;\r\n}\r\n"]}