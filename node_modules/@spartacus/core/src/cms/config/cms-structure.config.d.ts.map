{"version":3,"file":"cms-structure.config.d.ts","sources":["cms-structure.config.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\r\nimport { CmsConfig } from './cms-config';\r\n/**\r\n * The `CmsPageConfig` is used to build pages by configuration.\r\n * The interfaces are designed to have a clean configuration for\r\n * static CMS structure. Ordinary attributes that are not\r\n * required for configurable pages have been left out and\r\n * will not be serialized in the adapter logic.\r\n */\r\nexport interface CmsPageConfig {\r\n    /**\r\n     * When the `ignoreBackend` is set to true, the CMS backend\r\n     * will not be consumed. This saves network latency and is\r\n     * useful for commodity commerce pages.\r\n     * */\r\n    ignoreBackend?: boolean;\r\n    pageId?: string;\r\n    type?: string;\r\n    /**\r\n     * The page title is typically used to display the page heading\r\n     * as well as for the page title tag. The latter is used for browser\r\n     * navigation as well as SEO and social share platforms.\r\n     */\r\n    title?: string;\r\n    /**\r\n     * the template is used to bind to the layout\r\n     * configuration and css layout class\r\n     */\r\n    template?: string;\r\n    /**\r\n     * The page slots represent various sections on the page that\r\n     * can contain components.\r\n     */\r\n    slots: {\r\n        [key: string]: CmsPageSlotConfig;\r\n    };\r\n}\r\n/**\r\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\r\n */\r\nexport interface CmsPageSlotsConfig {\r\n    [key: string]: CmsPageSlotConfig;\r\n}\r\n/**\r\n * The `CmsPageSlotConfig` is a simplified configuration model\r\n * that can be used to configure slots in static configuration,\r\n * rather than loading from a backend.\r\n */\r\nexport interface CmsPageSlotConfig {\r\n    componentIds?: string[];\r\n    properties?: any;\r\n}\r\n/**\r\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\r\n * instead of using a backend CMS system. The configuration can be used to build\r\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\r\n * only require the necessary properties. Adapter logic is applied to serialize\r\n * the `CmsStructureConfig` into the required UI model.\r\n */\r\nexport declare abstract class CmsStructureConfig extends CmsConfig {\r\n    cmsStructure: {\r\n        components?: {\r\n            [key: string]: ContentSlotComponentData | any;\r\n        };\r\n        pages?: CmsPageConfig[];\r\n        slots?: CmsPageSlotsConfig;\r\n    };\r\n}\r\n"]}