{"version":3,"file":"cms.service.d.ts","sources":["cms.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { CmsComponent } from '../../model/cms.model';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { PageContext } from '../../routing/models/page-context.model';\r\nimport { ContentSlotData } from '../model/content-slot-data.model';\r\nimport { NodeItem } from '../model/node-item.model';\r\nimport { Page } from '../model/page.model';\r\nimport { StateWithCms } from '../store/cms-state';\r\nexport declare class CmsService {\r\n    protected store: Store<StateWithCms>;\r\n    protected routingService: RoutingService;\r\n    private components;\r\n    constructor(store: Store<StateWithCms>, routingService: RoutingService);\r\n    /**\r\n     * Get current CMS page data\r\n     */\r\n    getCurrentPage(): Observable<Page>;\r\n    /**\r\n     * Get CMS component data by uid\r\n     *\r\n     * This method can be safely and optimally used to load multiple components data at the same time.\r\n     * Calling getComponentData multiple times for different components will always result in optimized\r\n     * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\r\n     *\r\n     * In case the component data is not present, the method will load it.\r\n     * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\r\n     *\r\n     * @param uid CMS component uid\r\n     * @param pageContext if provided, it will be used to lookup the component data.\r\n     */\r\n    getComponentData<T extends CmsComponent | null>(uid: string, pageContext?: PageContext): Observable<T>;\r\n    private createComponentData;\r\n    /**\r\n     * Given the position, get the content slot data\r\n     * @param position : content slot position\r\n     */\r\n    getContentSlot(position: string): Observable<ContentSlotData>;\r\n    /**\r\n     * Given navigation node uid, get items (with id and type) inside the navigation entries\r\n     * @param navigationNodeUid : uid of the navigation node\r\n     */\r\n    getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem>;\r\n    /**\r\n     * Load navigation items data\r\n     * @param rootUid : the uid of the root navigation node\r\n     * @param itemList : list of items (with id and type)\r\n     */\r\n    loadNavigationItems(rootUid: string, itemList: {\r\n        id: string;\r\n        superType: string;\r\n    }[]): void;\r\n    /**\r\n     * Refresh the content of the latest cms page\r\n     */\r\n    refreshLatestPage(): void;\r\n    /**\r\n     * Refresh the cms page content by page Id\r\n     * @param pageId\r\n     */\r\n    refreshPageById(pageId: string): void;\r\n    /**\r\n     * Refresh cms component's content\r\n     * @param uid component uid\r\n     * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\r\n     * If not specified, 'current' page context is used.\r\n     */\r\n    refreshComponent(uid: string, pageContext?: PageContext): void;\r\n    /**\r\n     * Given pageContext, return the CMS page data\r\n     * @param pageContext\r\n     */\r\n    getPageState(pageContext: PageContext): Observable<Page>;\r\n    /**\r\n     * Given pageContext, return the CMS page data\r\n     * @param pageContext\r\n     */\r\n    getPageComponentTypes(pageContext: PageContext): Observable<string[]>;\r\n    /**\r\n     * Given pageContext, return whether the CMS page data exists or not\r\n     * @param pageContext\r\n     */\r\n    hasPage(pageContext: PageContext, forceReload?: boolean): Observable<boolean>;\r\n    /**\r\n     * Given pageContext, return the CMS page data\r\n     **/\r\n    getPage(pageContext: PageContext, forceReload?: boolean): Observable<Page>;\r\n    getPageIndex(pageContext: PageContext): Observable<string>;\r\n    setPageFailIndex(pageContext: PageContext, value: string): void;\r\n}\r\n"]}