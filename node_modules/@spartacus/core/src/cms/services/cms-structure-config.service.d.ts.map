{"version":3,"file":"cms-structure-config.service.d.ts","sources":["cms-structure-config.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { CmsPageConfig, CmsPageSlotsConfig, CmsStructureConfig } from '../config/cms-structure.config';\r\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\r\nimport { CmsStructureModel } from '../model/page.model';\r\n/**\r\n * Service that provides access to CMS structure from a static\r\n * configuration or configuration file. This class uses static\r\n * configuration is designed in async fashion so that configurations\r\n * can be loaded from a file or stream.\r\n *\r\n * The intent of the `CmsStructureConfigService` however is to provide\r\n * fast loading pages and default cms structure for commodity commerce.\r\n */\r\nexport declare abstract class CmsStructureConfigService {\r\n    protected cmsDataConfig: CmsStructureConfig;\r\n    constructor(cmsDataConfig: CmsStructureConfig);\r\n    /**\r\n     * Merge the cms structure to the pageStructure. The page structure\r\n     * can either hold complete page structures or global structures that\r\n     * might apply to all pages (such has header coponents).\r\n     */\r\n    mergePageStructure(pageId: string, pageStructure: CmsStructureModel): Observable<CmsStructureModel>;\r\n    /**\r\n     *\r\n     * Returns boolean observable to indicate whether the page should not be\r\n     * loaded from the backend. This is useful for pages which are comoditized\r\n     * and follow best practice.\r\n     *\r\n     * By default, configurable pages are driven by static configuration,\r\n     * in order to allow for fast loading pages (preventing network delays).\r\n     */\r\n    shouldIgnoreBackend(pageId: string): Observable<boolean>;\r\n    /**\r\n     * returns an Observable component data from the static configuration.\r\n     */\r\n    getComponentFromConfig(componentId: string): Observable<ContentSlotComponentData | any>;\r\n    /**\r\n     * returns an Observable components data from the static configuration.\r\n     */\r\n    getComponentsFromConfig(ids: string[]): Observable<ContentSlotComponentData[]>;\r\n    /**\r\n     * returns an observable with the `PageConfig`.\r\n     */\r\n    protected getPageFromConfig(pageId: string): Observable<CmsPageConfig>;\r\n    /**\r\n     * Merge page data from the configuration into the given structure, if any.\r\n     * If the given page structure is empty, a page is created and the page slots are\r\n     * are merged into the page.\r\n     */\r\n    protected mergePage(pageId: string, pageStructure: CmsStructureModel): Observable<CmsStructureModel>;\r\n    /**\r\n     * Adds any pre-configured slots for pages that do not use them.\r\n     * If pages have a slot for the given position, the configiuration\r\n     * is ingored. Even if the slot does not have inner structure (such as\r\n     * components), so that the cms structure is able to override the (static)\r\n     * configuration.\r\n     */\r\n    protected mergeSlots(pageStructure: CmsStructureModel, slots?: CmsPageSlotsConfig): Observable<CmsStructureModel>;\r\n    protected getComponentsByPosition(slots: CmsPageSlotsConfig, position: string): ContentSlotComponentData[];\r\n    protected getComponentById(componentId: string): ContentSlotComponentData;\r\n}\r\n"]}