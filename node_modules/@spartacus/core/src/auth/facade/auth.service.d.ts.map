{"version":3,"file":"auth.service.d.ts","sources":["auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { ClientToken, UserToken } from '../models/token-types.model';\r\nimport { StateWithAuth } from '../store/auth-state';\r\nexport declare class AuthService {\r\n    protected store: Store<StateWithAuth>;\r\n    constructor(store: Store<StateWithAuth>);\r\n    /**\r\n     * Loads a new user token\r\n     * @param userId\r\n     * @param password\r\n     */\r\n    authorize(userId: string, password: string): void;\r\n    /**\r\n     * This function provides the userId the OCC calls should use, depending\r\n     * on whether there is an active storefront session or not.\r\n     *\r\n     * It returns the userId of the current storefront user or 'anonymous'\r\n     * in the case there are no signed in user in the storefront.\r\n     *\r\n     * The user id of a regular customer session is 'current'.  In the case of an\r\n     * asm customer emulation session, the userId will be the customerId.\r\n     */\r\n    getOccUserId(): Observable<string>;\r\n    /**\r\n     * Calls provided callback with current user id.\r\n     *\r\n     * @param cb callback function to invoke\r\n     */\r\n    invokeWithUserId(cb: (userId: string) => any): Subscription;\r\n    /**\r\n     * Returns the user's token\r\n     */\r\n    getUserToken(): Observable<UserToken>;\r\n    /**\r\n     * Refreshes the user token\r\n     * @param token a user token to refresh\r\n     */\r\n    refreshUserToken(token: UserToken): void;\r\n    /**\r\n     * Store the provided token\r\n     */\r\n    authorizeWithToken(token: UserToken): void;\r\n    /**\r\n     * Logout a storefront customer\r\n     */\r\n    logout(): void;\r\n    /**\r\n     * Returns a client token.  The client token from the store is returned if there is one.\r\n     * Otherwise, an new token is fetched from the backend and saved in the store.\r\n     */\r\n    getClientToken(): Observable<ClientToken>;\r\n    /**\r\n     * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\r\n     * The new clientToken is returned.\r\n     */\r\n    refreshClientToken(): Observable<ClientToken>;\r\n    protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean;\r\n    /**\r\n     * Returns `true` if the user is logged in; and `false` if the user is anonymous.\r\n     */\r\n    isUserLoggedIn(): Observable<boolean>;\r\n}\r\n"]}