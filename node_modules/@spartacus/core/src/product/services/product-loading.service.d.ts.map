{"version":3,"file":"product-loading.service.d.ts","sources":["product-loading.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Actions } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Product } from '../../model/product.model';\r\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\r\nimport { StateWithProduct } from '../store/product-state';\r\nexport declare class ProductLoadingService {\r\n    protected store: Store<StateWithProduct>;\r\n    protected loadingScopes: LoadingScopesService;\r\n    protected actions$: Actions;\r\n    protected platformId: any;\r\n    protected products: {\r\n        [code: string]: {\r\n            [scope: string]: Observable<Product>;\r\n        };\r\n    };\r\n    constructor(store: Store<StateWithProduct>, loadingScopes: LoadingScopesService, actions$: Actions, platformId: any);\r\n    get(productCode: string, scopes: string[]): Observable<Product>;\r\n    protected initProductScopes(productCode: string, scopes: string[]): void;\r\n    protected getScopesIndex(scopes: string[]): string;\r\n    /**\r\n     * Creates observable for providing specified product data for the scope\r\n     *\r\n     * @param productCode\r\n     * @param scope\r\n     */\r\n    protected getProductForScope(productCode: string, scope: string): Observable<Product>;\r\n    /**\r\n     * Returns reload triggers for product per scope\r\n     *\r\n     * @param productCode\r\n     * @param scope\r\n     */\r\n    protected getProductReloadTriggers(productCode: string, scope: string): Observable<boolean>[];\r\n    /**\r\n     * Generic method that returns stream triggering reload by maxAge\r\n     *\r\n     * Could be refactored to separate service in future to use in other\r\n     * max age reload implementations\r\n     *\r\n     * @param loadStart$ Stream that emits on load start\r\n     * @param loadFinish$ Stream that emits on load finish\r\n     * @param maxAge max age\r\n     */\r\n    private getMaxAgeTrigger;\r\n}\r\n"]}