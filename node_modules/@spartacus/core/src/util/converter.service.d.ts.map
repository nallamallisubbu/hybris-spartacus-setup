{"version":3,"file":"converter.service.d.ts","sources":["converter.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken, Injector } from '@angular/core';\r\nimport { OperatorFunction } from 'rxjs';\r\n/**\r\n * Converter is used to convert source data model to target data model.\r\n * By convention, we distinguish two flows:\r\n *   - *Normalize* is the conversion from backend models to UI models\r\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\r\n *\r\n * Converters can be stacked together to to apply decoupled customizations\r\n */\r\nexport interface Converter<S, T> {\r\n    /**\r\n     * Convert converts source model to target model. Can use optional target parameter,\r\n     * used in case of stacking multiple converters (for example, to implement populator pattern).\r\n     *\r\n     * @param source Source data model\r\n     * @param target Optional, partially converted target model\r\n     */\r\n    convert(source: S, target?: T): T;\r\n}\r\nexport declare class ConverterService {\r\n    protected injector: Injector;\r\n    constructor(injector: Injector);\r\n    private converters;\r\n    private getConverters;\r\n    /**\r\n     * Will return true if converters for specified token were provided\r\n     */\r\n    hasConverters<S, T>(injectionToken: InjectionToken<Converter<S, T>>): boolean;\r\n    /**\r\n     * Pipeable operator to apply converter logic in a observable stream\r\n     */\r\n    pipeable<S, T>(injectionToken: InjectionToken<Converter<S, T>>): OperatorFunction<S, T>;\r\n    /**\r\n     * Pipeable operator to apply converter logic in a observable stream to collection of items\r\n     */\r\n    pipeableMany<S, T>(injectionToken: InjectionToken<Converter<S, T>>): OperatorFunction<S[], T[]>;\r\n    /**\r\n     * Apply converter logic specified by injection token to source data\r\n     */\r\n    convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T;\r\n    /**\r\n     * Apply converter logic specified by injection token to a collection\r\n     */\r\n    convertMany<S, T>(sources: S[], injectionToken: InjectionToken<Converter<S, T>>): T[];\r\n    private convertSource;\r\n}\r\n"]}