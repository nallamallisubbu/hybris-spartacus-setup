{"version":3,"file":"checkout-payment.service.d.ts","sources":["checkout-payment.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\r\nimport { CardType, PaymentDetails } from '../../model/cart.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { StateWithCheckout } from '../store/checkout-state';\r\nexport declare class CheckoutPaymentService {\r\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>;\r\n    protected authService: AuthService;\r\n    protected activeCartService: ActiveCartService;\r\n    constructor(checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>, authService: AuthService, activeCartService: ActiveCartService);\r\n    /**\r\n     * Get card types\r\n     */\r\n    getCardTypes(): Observable<CardType[]>;\r\n    /**\r\n     * Get payment details\r\n     */\r\n    getPaymentDetails(): Observable<PaymentDetails>;\r\n    /**\r\n     * Get status about set Payment Details process\r\n     */\r\n    getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>>;\r\n    /**\r\n     * Clear info about process of setting Payment Details\r\n     */\r\n    resetSetPaymentDetailsProcess(): void;\r\n    /**\r\n     * Load the supported card types\r\n     */\r\n    loadSupportedCardTypes(): void;\r\n    /**\r\n     * Create payment details using the given paymentDetails param\r\n     * @param paymentDetails: the PaymentDetails to be created\r\n     */\r\n    createPaymentDetails(paymentDetails: PaymentDetails): void;\r\n    /**\r\n     * Set payment details\r\n     * @param paymentDetails : the PaymentDetails to be set\r\n     */\r\n    setPaymentDetails(paymentDetails: PaymentDetails): void;\r\n    /**\r\n     * Sets payment loading to true without having the flicker issue (GH-3102)\r\n     */\r\n    paymentProcessSuccess(): void;\r\n    protected actionAllowed(): boolean;\r\n}\r\n"]}