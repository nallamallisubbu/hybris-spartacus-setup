{"version":3,"file":"event.service.d.ts","sources":["event.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n/**\r\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\r\n * for the given event.\r\n *\r\n * It is possible to register multiple sources to a single event, even without\r\n * knowing as multiple decoupled features can attach sources to the same\r\n * event type.\r\n */\r\nexport declare class EventService {\r\n    /**\r\n     * The various events meta are collected in a map, stored by the event type class\r\n     */\r\n    private eventsMeta;\r\n    /**\r\n     * Register an event source for the given event type.\r\n     *\r\n     * CAUTION: To avoid memory leaks, the returned teardown function should be called\r\n     *  when the event source is no longer maintained by its creator\r\n     * (i.e. in `ngOnDestroy` if the event source was registered in the component).\r\n     *\r\n     * @param eventType the event type\r\n     * @param source$ an observable that represents the source\r\n     *\r\n     * @returns a teardown function which unregisters the given event source\r\n     */\r\n    register<T>(eventType: Type<T>, source$: Observable<T>): () => void;\r\n    /**\r\n     * Returns a stream of events for the given event type\r\n     * @param eventTypes event type\r\n     */\r\n    get<T>(eventType: Type<T>): Observable<T>;\r\n    /**\r\n     * Dispatches an instance of an individual event.\r\n     */\r\n    dispatch(event: Object): void;\r\n    /**\r\n     * Returns the input subject used to dispatch a single event.\r\n     * The subject is created on demand, when it's needed for the first time.\r\n     * @param eventType type of event\r\n     */\r\n    private getInputSubject;\r\n    /**\r\n     * Returns the event meta object for the given event type\r\n     */\r\n    private getEventMeta;\r\n    /**\r\n     * Creates the event meta object for the given event type\r\n     */\r\n    private createEventMeta;\r\n    /**\r\n     * Checks if the event type is a valid type (is a class with constructor).\r\n     *\r\n     * Should be used only in dev mode.\r\n     */\r\n    private validateEventType;\r\n    /**\r\n     * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\r\n     *\r\n     * Should be used only in dev mode.\r\n     */\r\n    private getValidatedEventStream;\r\n}\r\n"]}