{"version":3,"file":"protected-routes.service.d.ts","sources":["protected-routes.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { RoutingConfig } from '../configurable-routes/config/routing-config';\r\nexport declare class ProtectedRoutesService {\r\n    protected config: RoutingConfig;\r\n    private nonProtectedPaths;\r\n    protected get routingConfig(): RoutingConfig['routing'];\r\n    /**\r\n     * Returns 'protected' property (boolean) from routing config\r\n     *\r\n     * @returns boolean\r\n     */\r\n    get shouldProtect(): boolean;\r\n    constructor(config: RoutingConfig);\r\n    /**\r\n     * Tells if the url is protected\r\n     */\r\n    isUrlProtected(urlSegments: string[]): boolean;\r\n    /**\r\n     * Tells whether the url matches at least one of the paths\r\n     */\r\n    protected matchAnyPath(urlSegments: string[], pathsSegments: string[][]): boolean;\r\n    /**\r\n     * Tells whether the url matches the path\r\n     */\r\n    protected matchPath(urlSegments: string[], pathSegments: string[]): boolean;\r\n    /**\r\n     * Returns a list of paths that are not protected\r\n     */\r\n    protected getNonProtectedPaths(): string[];\r\n    /**\r\n     * Splits the url by slashes\r\n     */\r\n    protected getSegments(url: string): string[];\r\n}\r\n"]}