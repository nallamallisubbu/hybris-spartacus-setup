{"version":3,"file":"semantic-path.service.d.ts","sources":["semantic-path.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { UrlParsingService } from './url-parsing.service';\r\nimport { UrlCommands } from './url-command';\r\nimport { RoutingConfigService } from '../routing-config.service';\r\nexport declare class SemanticPathService {\r\n    protected routingConfigService: RoutingConfigService;\r\n    protected urlParser: UrlParsingService;\r\n    readonly ROOT_URL: string[];\r\n    constructor(routingConfigService: RoutingConfigService, urlParser: UrlParsingService);\r\n    /**\r\n     * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\r\n     */\r\n    get(routeName: string): string;\r\n    /**\r\n     * Transforms the array of url commands. Each command can be:\r\n     * a) string - will be left untouched\r\n     * b) object { cxRoute: <route name> } - will be replaced with semantic path\r\n     * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\r\n     *\r\n     * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\r\n     */\r\n    transform(commands: UrlCommands): any[];\r\n    private isRouteCommand;\r\n    private shouldOutputAbsolute;\r\n    private generateUrlPart;\r\n    private standarizeRouteCommand;\r\n    private provideParamsValues;\r\n    private findPathWithFillableParams;\r\n    private getParams;\r\n    private getMappedParamName;\r\n    private warn;\r\n}\r\n"]}