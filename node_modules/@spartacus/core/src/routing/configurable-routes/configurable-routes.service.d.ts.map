{"version":3,"file":"configurable-routes.service.d.ts","sources":["configurable-routes.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken, Injector } from '@angular/core';\r\nimport { Route, Routes, UrlMatcher } from '@angular/router';\r\nimport { UrlMatcherService } from '../services/url-matcher.service';\r\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\r\nimport { RouteConfig } from './routes-config';\r\nimport { RoutingConfigService } from './routing-config.service';\r\nexport declare class ConfigurableRoutesService {\r\n    protected injector: Injector;\r\n    protected routingConfigService: RoutingConfigService;\r\n    protected urlMatcherService: UrlMatcherService;\r\n    constructor(injector: Injector, routingConfigService: RoutingConfigService, urlMatcherService: UrlMatcherService);\r\n    protected initCalled: boolean;\r\n    /**\r\n     * Enhances existing Angular routes using the routing config of Spartacus.\r\n     * Can be called only once.\r\n     */\r\n    init(): void;\r\n    /**\r\n     * Enhances existing Angular routes using the routing config of Spartacus.\r\n     */\r\n    protected configure(): void;\r\n    /**\r\n     * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\r\n     *\r\n     * @param routes list of Angular `Route` objects\r\n     */\r\n    protected configureRoutes(routes: Routes): Routes;\r\n    /**\r\n     * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\r\n     * Uses the property `data.cxRoute` to determine the name of the route.\r\n     * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\r\n     *\r\n     * @param route Angular `Route` object\r\n     */\r\n    protected configureRoute(route: Route): Route;\r\n    /**\r\n     * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\r\n     *\r\n     * @param route Route object\r\n     * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\r\n     *  that create UrlMatchers based on the given route.\r\n     */\r\n    protected resolveUrlMatchers(route: Route, matchersOrFactories: RouteConfig['matchers']): UrlMatcher;\r\n    /**\r\n     * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\r\n     *\r\n     * @param route Route object\r\n     * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\r\n     */\r\n    protected resolveUrlMatcherFactory(route: Route, factoryToken: InjectionToken<UrlMatcherFactory>): UrlMatcher;\r\n    /**\r\n     * Returns the name of the Route stored in its property `data.cxRoute`\r\n     * @param route\r\n     */\r\n    protected getRouteName(route: Route): string;\r\n    protected validateRouteConfig(routeConfig: RouteConfig, routeName: string, route: Route): void;\r\n    private warn;\r\n}\r\n"]}