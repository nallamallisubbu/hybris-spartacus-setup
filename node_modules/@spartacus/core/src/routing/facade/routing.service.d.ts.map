{"version":3,"file":"routing.service.d.ts","sources":["routing.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { NavigationExtras } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\r\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\r\nimport { PageContext } from '../models/page-context.model';\r\nimport { RouterState } from '../store/routing-state';\r\nexport declare class RoutingService {\r\n    protected store: Store<RouterState>;\r\n    protected winRef: WindowRef;\r\n    protected semanticPathService: SemanticPathService;\r\n    constructor(store: Store<RouterState>, winRef: WindowRef, semanticPathService: SemanticPathService);\r\n    /**\r\n     * Get the current router state\r\n     */\r\n    getRouterState(): Observable<RouterState>;\r\n    /**\r\n     * Get the `PageContext` from the state\r\n     */\r\n    getPageContext(): Observable<PageContext>;\r\n    /**\r\n     * Get the next `PageContext` from the state\r\n     */\r\n    getNextPageContext(): Observable<PageContext>;\r\n    /**\r\n     * Get the `isNavigating` info from the state\r\n     */\r\n    isNavigating(): Observable<boolean>;\r\n    /**\r\n     * Navigation with a new state into history\r\n     * @param commands: url commands\r\n     * @param query\r\n     * @param extras: Represents the extra options used during navigation.\r\n     */\r\n    go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void;\r\n    /**\r\n     * Navigation using URL\r\n     * @param url\r\n     */\r\n    goByUrl(url: string): void;\r\n    /**\r\n     * Navigating back\r\n     */\r\n    back(): void;\r\n    /**\r\n     * Navigating forward\r\n     */\r\n    forward(): void;\r\n    /**\r\n     * Navigation with a new state into history\r\n     * @param path\r\n     * @param query\r\n     * @param extras: Represents the extra options used during navigation.\r\n     */\r\n    protected navigate(path: any[], query?: object, extras?: NavigationExtras): void;\r\n}\r\n"]}