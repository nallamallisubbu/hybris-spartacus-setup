{"version":3,"file":"url-matcher.service.d.ts","sources":["url-matcher.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { UrlMatcher } from '@angular/router';\r\nimport { GlobService } from '../../util/glob.service';\r\nexport declare class UrlMatcherService {\r\n    protected globService: GlobService;\r\n    constructor(globService: GlobService);\r\n    /**\r\n     * Returns a matcher that is always fails\r\n     */\r\n    getFalsy(): UrlMatcher;\r\n    /**\r\n     * Returns a matcher for given list of paths\r\n     */\r\n    getFromPaths(paths: string[]): UrlMatcher;\r\n    /**\r\n     * Returns a matcher that combines the given matchers\r\n     * */\r\n    getCombined(matchers: UrlMatcher[]): UrlMatcher;\r\n    /**\r\n     * Similar to Angular's defaultUrlMatcher. Differences:\r\n     * - the `path` comes from function's argument, not from `route.path`\r\n     * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\r\n     */\r\n    protected getFromPath(path?: string): UrlMatcher;\r\n    /**\r\n     * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\r\n     */\r\n    getOpposite(originalMatcher: UrlMatcher): UrlMatcher;\r\n    /**\r\n     * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\r\n     */\r\n    getFromGlob(globPatterns: string[]): UrlMatcher;\r\n}\r\n"]}