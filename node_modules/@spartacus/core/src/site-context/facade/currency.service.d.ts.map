{"version":3,"file":"currency.service.d.ts","sources":["currency.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Currency } from '../../model/misc.model';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { SiteContextConfig } from '../config/site-context-config';\r\nimport { StateWithSiteContext } from '../store/state';\r\nimport { SiteContext } from './site-context.interface';\r\n/**\r\n * Facade that provides easy access to curreny state, actions and selectors.\r\n */\r\nexport declare class CurrencyService implements SiteContext<Currency> {\r\n    protected store: Store<StateWithSiteContext>;\r\n    protected config: SiteContextConfig;\r\n    private sessionStorage;\r\n    constructor(store: Store<StateWithSiteContext>, winRef: WindowRef, config: SiteContextConfig);\r\n    /**\r\n     * Represents all the currencies supported by the current store.\r\n     */\r\n    getAll(): Observable<Currency[]>;\r\n    /**\r\n     * Represents the isocode of the active currency.\r\n     */\r\n    getActive(): Observable<string>;\r\n    /**\r\n     * Sets the active language.\r\n     */\r\n    setActive(isocode: string): import(\"rxjs\").Subscription;\r\n    /**\r\n     * Initials the active currency. The active currency is either given\r\n     * by the last visit (stored in session storage) or by the\r\n     * default session currency of the store.\r\n     */\r\n    initialize(): void;\r\n}\r\n"]}