{"version":3,"file":"state-persistence.service.d.ts","sources":["state-persistence.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable, Subscription } from 'rxjs';\r\nimport { StorageSyncType } from '../../state/config/state-config';\r\nimport { WindowRef } from '../../window/window-ref';\r\nexport declare class StatePersistenceService {\r\n    protected winRef: WindowRef;\r\n    constructor(winRef: WindowRef);\r\n    /**\r\n     * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\r\n     * It is context aware, so you can keep different state for te same feature based on specified context.\r\n     *\r\n     * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\r\n     * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\r\n     * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\r\n     *\r\n     * On each context change onRead function will be executed with state from storage provided as a parameter.\r\n     *\r\n     * Omitting context$ will trigger onRead only once at initialization.\r\n     *\r\n     * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\r\n     * @param state$ State to be saved and later restored.\r\n     * @param context$ Context for state\r\n     * @param storageType Storage type to be used to persist state\r\n     * @param onRead Function to be executed on each storage read after context change\r\n     *\r\n     * @returns Subscriptions for reading/writing in storage on context/state change\r\n     */\r\n    syncWithStorage<T>({ key, state$, context$, storageType, onRead, }: {\r\n        key: string;\r\n        state$: Observable<T>;\r\n        context$?: Observable<string | Array<string>>;\r\n        storageType?: StorageSyncType;\r\n        onRead?: (stateFromStorage: T) => void;\r\n    }): Subscription;\r\n    protected generateKeyWithContext(context: string | Array<string>, key: string): string;\r\n}\r\n"]}