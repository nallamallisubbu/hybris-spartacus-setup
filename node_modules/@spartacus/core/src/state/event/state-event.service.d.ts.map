{"version":3,"file":"state-event.service.d.ts","sources":["state-event.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Type } from '@angular/core';\r\nimport { ActionsSubject } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { EventService } from '../../event/event.service';\r\nimport { ActionToEventMapping } from './action-to-event-mapping';\r\n/**\r\n * Registers streams of ngrx actions as events source streams\r\n */\r\nexport declare class StateEventService {\r\n    protected actionsSubject: ActionsSubject;\r\n    protected eventService: EventService;\r\n    constructor(actionsSubject: ActionsSubject, eventService: EventService);\r\n    /**\r\n     * Registers an event source stream of specific events\r\n     * mapped from a given action type.\r\n     *\r\n     * @param mapping mapping from action to event\r\n     *\r\n     * @returns a teardown function that unregisters the event source\r\n     */\r\n    register<T>(mapping: ActionToEventMapping<T>): () => void;\r\n    /**\r\n     * Returns a stream of specific events mapped from a specific action.\r\n     * @param mapping mapping from action to event\r\n     */\r\n    protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T>;\r\n    /**\r\n     * Creates an event instance for given class out from the action object.\r\n     * Unless the `factory` parameter is given, the action's `payload` is used\r\n     * as the argument for the event's constructor.\r\n     *\r\n     * @param action instance of an Action\r\n     * @param mapping mapping from action to event\r\n     * @param factory optional function getting an action instance and returning an event instance\r\n     *\r\n     * @returns instance of an Event\r\n     */\r\n    protected createEvent<T>(action: {\r\n        type: string;\r\n        payload?: any;\r\n    }, eventType: Type<T>, factory?: (action: any) => T): T;\r\n}\r\n"]}