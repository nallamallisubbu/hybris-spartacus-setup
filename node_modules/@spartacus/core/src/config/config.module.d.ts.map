{"version":3,"file":"config.module.d.ts","sources":["config.module.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionToken, ModuleWithProviders, Provider } from '@angular/core';\r\n/**\r\n * Global Configuration injection token, can be used to inject configuration to any part of the app\r\n */\r\nexport declare const Config: InjectionToken<unknown>;\r\n/**\r\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\r\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\r\n */\r\nexport declare const ConfigChunk: InjectionToken<unknown>;\r\n/**\r\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\r\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\r\n *\r\n * General rule is, that all config provided in libraries should be provided as default config.\r\n */\r\nexport declare const DefaultConfigChunk: InjectionToken<unknown>;\r\n/**\r\n * Helper function to provide configuration chunk using ConfigChunk token\r\n *\r\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\r\n *\r\n * @param config Config object to merge with the global configuration\r\n */\r\nexport declare function provideConfig(config?: any, defaultConfig?: boolean): Provider;\r\n/**\r\n * Helper function to provide configuration with factory function, using ConfigChunk token\r\n *\r\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\r\n *\r\n * @param configFactory Factory Function that will generate config object\r\n * @param deps Optional dependencies to a factory function\r\n */\r\nexport declare function provideConfigFactory(configFactory: Function, deps?: any[], defaultConfig?: boolean): Provider;\r\n/**\r\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\r\n *\r\n * @param config Config object to merge with the default configuration\r\n */\r\nexport declare function provideDefaultConfig(config?: any): Provider;\r\n/**\r\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\r\n *\r\n * @param configFactory Factory Function that will generate config object\r\n * @param deps Optional dependencies to a factory function\r\n */\r\nexport declare function provideDefaultConfigFactory(configFactory: Function, deps?: any[]): Provider;\r\n/**\r\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\r\n *\r\n */\r\nexport declare function configurationFactory(configChunks?: any[], defaultConfigChunks?: any[]): any;\r\nexport declare class ConfigModule {\r\n    /**\r\n     * Import ConfigModule and contribute config to the global configuration\r\n     *\r\n     * To provide default configuration in libraries provideDefaultConfig should be used instead.\r\n     *\r\n     * @param config Config object to merge with the global configuration\r\n     */\r\n    static withConfig(config: object): ModuleWithProviders<ConfigModule>;\r\n    /**\r\n     * Import ConfigModule and contribute config to the global configuration using factory function\r\n     *\r\n     * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\r\n     *\r\n     * @param configFactory Factory function that will generate configuration\r\n     * @param deps Optional dependencies to factory function\r\n     */\r\n    static withConfigFactory(configFactory: Function, deps?: any[]): ModuleWithProviders<ConfigModule>;\r\n    /**\r\n     * Module with providers, should be imported only once, if possible, at the root of the app.\r\n     *\r\n     * @param config\r\n     */\r\n    static forRoot(config?: any): ModuleWithProviders<ConfigModule>;\r\n}\r\n"]}