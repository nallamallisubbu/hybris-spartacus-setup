{"version":3,"file":"config-initializer.service.d.ts","sources":["config-initializer.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\n/**\r\n * Provides support for CONFIG_INITIALIZERS\r\n */\r\nexport declare class ConfigInitializerService {\r\n    protected config: any;\r\n    protected initializerGuard: any;\r\n    constructor(config: any, initializerGuard: any);\r\n    protected ongoingScopes$: BehaviorSubject<string[]>;\r\n    /**\r\n     * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\r\n     */\r\n    get isStable(): boolean;\r\n    /**\r\n     * Recommended way to get config for code that can run before app will finish\r\n     * initialization (APP_INITIALIZERS, selected service constructors)\r\n     *\r\n     * Used without parameters waits for the whole config to become stable\r\n     *\r\n     * Parameters allow to describe which part of the config should be stable using\r\n     * string describing config part, e.g.:\r\n     * 'siteContext', 'siteContext.language', etc.\r\n     *\r\n     * @param scopes String describing parts of the config we want to be sure are stable\r\n     */\r\n    getStableConfig(...scopes: string[]): Promise<any>;\r\n    /**\r\n     * Removes provided scopes from currently ongoingScopes\r\n     *\r\n     * @param scopes\r\n     */\r\n    protected finishScopes(scopes: string[]): void;\r\n    /**\r\n     * Return true if provided scopes are not part of ongoingScopes\r\n     *\r\n     * @param scopes\r\n     * @param ongoingScopes\r\n     */\r\n    protected areReady(scopes: string[], ongoingScopes: string[]): boolean;\r\n    /**\r\n     * Check if two scopes overlap.\r\n     *\r\n     * Example of scopes that overlap:\r\n     * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\r\n     *\r\n     * Example of scopes that do not overlap:\r\n     * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\r\n     *\r\n     * @param a ScopeA\r\n     * @param b ScopeB\r\n     */\r\n    protected scopesOverlap(a: string, b: string): boolean;\r\n}\r\n"]}