{"version":3,"file":"store-finder.service.d.ts","sources":["store-finder.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { GeoPoint } from '../../model/misc.model';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { FindStoresState, StateWithStoreFinder, ViewAllStoresState } from '../store/store-finder-state';\r\nimport { StoreFinderSearchConfig } from './../model/search-config';\r\nimport { GlobalMessageService } from '../../global-message/index';\r\nimport { RoutingService } from '../../routing/index';\r\nexport declare class StoreFinderService {\r\n    protected store: Store<StateWithStoreFinder>;\r\n    protected winRef: WindowRef;\r\n    protected globalMessageService: GlobalMessageService;\r\n    protected routingService: RoutingService;\r\n    private geolocationWatchId;\r\n    constructor(store: Store<StateWithStoreFinder>, winRef: WindowRef, globalMessageService: GlobalMessageService, routingService: RoutingService);\r\n    /**\r\n     * Returns boolean observable for store's loading state\r\n     */\r\n    getStoresLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns observable for store's entities\r\n     */\r\n    getFindStoresEntities(): Observable<FindStoresState>;\r\n    /**\r\n     * Returns boolean observable for view all store's loading state\r\n     */\r\n    getViewAllStoresLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns observable for view all store's entities\r\n     */\r\n    getViewAllStoresEntities(): Observable<ViewAllStoresState>;\r\n    /**\r\n     * Store finding action functionality\r\n     * @param queryText text query\r\n     * @param searchConfig search configuration\r\n     * @param longitudeLatitude longitude and latitude coordinates\r\n     * @param countryIsoCode country ISO code\r\n     * @param useMyLocation current location coordinates\r\n     * @param radius radius of the scope from the center point\r\n     */\r\n    findStoresAction(queryText: string, searchConfig?: StoreFinderSearchConfig, longitudeLatitude?: GeoPoint, countryIsoCode?: string, useMyLocation?: boolean, radius?: number): void;\r\n    /**\r\n     * View all stores\r\n     */\r\n    viewAllStores(): void;\r\n    /**\r\n     * View all stores by id\r\n     * @param storeId store id\r\n     */\r\n    viewStoreById(storeId: string): void;\r\n    private clearWatchGeolocation;\r\n}\r\n"]}