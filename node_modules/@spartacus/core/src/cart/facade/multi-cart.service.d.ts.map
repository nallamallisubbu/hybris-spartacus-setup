{"version":3,"file":"multi-cart.service.d.ts","sources":["multi-cart.service.d.ts"],"names":[],"mappingssourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { OrderEntry } from '../../model/order.model';\r\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nexport declare class MultiCartService {\r\n    protected store: Store<StateWithMultiCart>;\r\n    constructor(store: Store<StateWithMultiCart>);\r\n    /**\r\n     * Returns cart from store as an observable\r\n     *\r\n     * @param cartId\r\n     */\r\n    getCart(cartId: string): Observable<Cart>;\r\n    /**\r\n     * Returns cart entity from store (cart with loading, error, success flags) as an observable\r\n     *\r\n     * @param cartId\r\n     */\r\n    getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>>;\r\n    /**\r\n     * Returns true when there are no operations on that in progress and it is not currently loading\r\n     *\r\n     * @param cartId\r\n     */\r\n    isStable(cartId: string): Observable<boolean>;\r\n    /**\r\n     * Simple random temp cart id generator\r\n     */\r\n    private generateTempCartId;\r\n    /**\r\n     * Create or merge cart\r\n     *\r\n     * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\r\n     */\r\n    createCart({ userId, oldCartId, toMergeCartGuid, extraData, }: {\r\n        userId: string;\r\n        oldCartId?: string;\r\n        toMergeCartGuid?: string;\r\n        extraData?: {\r\n            active?: boolean;\r\n        };\r\n    }): Observable<ProcessesLoaderState<Cart>>;\r\n    /**\r\n     * Merge provided cart to current user cart\r\n     *\r\n     * @param params Object with userId, cartId and extraData\r\n     */\r\n    mergeToCurrentCart({ userId, cartId, extraData, }: {\r\n        userId: string;\r\n        cartId: string;\r\n        extraData?: {\r\n            active?: boolean;\r\n        };\r\n    }): void;\r\n    /**\r\n     * Load cart\r\n     *\r\n     * @param params Object with userId, cartId and extraData\r\n     */\r\n    loadCart({ cartId, userId, extraData, }: {\r\n        cartId: string;\r\n        userId: string;\r\n        extraData?: any;\r\n    }): void;\r\n    /**\r\n     * Get cart entries as an observable\r\n     * @param cartId\r\n     */\r\n    getEntries(cartId: string): Observable<OrderEntry[]>;\r\n    /**\r\n     * Add entry to cart\r\n     *\r\n     * @param userId\r\n     * @param cartId\r\n     * @param productCode\r\n     * @param quantity\r\n     */\r\n    addEntry(userId: string, cartId: string, productCode: string, quantity: number): void;\r\n    /**\r\n     * Add multiple entries to cart\r\n     *\r\n     * @param userId\r\n     * @param cartId\r\n     * @param products Array with items (productCode and quantity)\r\n     */\r\n    addEntries(userId: string, cartId: string, products: Array<{\r\n        productCode: string;\r\n        quantity: number;\r\n    }>): void;\r\n    /**\r\n     * Remove entry from cart\r\n     *\r\n     * @param userId\r\n     * @param cartId\r\n     * @param entryNumber\r\n     */\r\n    removeEntry(userId: string, cartId: string, entryNumber: number): void;\r\n    /**\r\n     * Update entry in cart. For quantity = 0 it removes entry\r\n     *\r\n     * @param userId\r\n     * @param cartId\r\n     * @param entryNumber\r\n     * @param quantity\r\n     */\r\n    updateEntry(userId: string, cartId: string, entryNumber: number, quantity: number): void;\r\n    /**\r\n     * Get specific entry from cart\r\n     *\r\n     * @param cartId\r\n     * @param productCode\r\n     */\r\n    getEntry(cartId: string, productCode: string): Observable<OrderEntry | null>;\r\n    /**\r\n     * Assign email to the cart\r\n     *\r\n     * @param cartId\r\n     * @param userId\r\n     * @param email\r\n     */\r\n    assignEmail(cartId: string, userId: string, email: string): void;\r\n    /**\r\n     * Delete cart\r\n     *\r\n     * @param cartId\r\n     * @param userId\r\n     */\r\n    deleteCart(cartId: string, userId: string): void;\r\n}\r\n"]}