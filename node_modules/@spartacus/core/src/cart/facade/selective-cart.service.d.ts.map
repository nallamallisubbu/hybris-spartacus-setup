{"version":3,"file":"selective-cart.service.d.ts","sources":["selective-cart.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { OrderEntry } from '../../model/order.model';\r\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\r\nimport { UserService } from '../../user/facade/user.service';\r\nimport { CartConfigService } from '../services/cart-config.service';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartService } from './multi-cart.service';\r\nexport declare class SelectiveCartService {\r\n    protected store: Store<StateWithMultiCart>;\r\n    protected userService: UserService;\r\n    protected authService: AuthService;\r\n    protected multiCartService: MultiCartService;\r\n    protected baseSiteService: BaseSiteService;\r\n    protected cartConfigService: CartConfigService;\r\n    private customerId;\r\n    private userId;\r\n    private cartId;\r\n    private selectiveCart$;\r\n    private cartId$;\r\n    private readonly PREVIOUS_USER_ID_INITIAL_VALUE;\r\n    private previousUserId;\r\n    private cartSelector$;\r\n    constructor(store: Store<StateWithMultiCart>, userService: UserService, authService: AuthService, multiCartService: MultiCartService, baseSiteService: BaseSiteService, cartConfigService: CartConfigService);\r\n    getCart(): Observable<Cart>;\r\n    getEntries(): Observable<OrderEntry[]>;\r\n    getLoaded(): Observable<boolean>;\r\n    private load;\r\n    addEntry(productCode: string, quantity: number): void;\r\n    removeEntry(entry: OrderEntry): void;\r\n    updateEntry(entryNumber: number, quantity: number): void;\r\n    getEntry(productCode: string): Observable<OrderEntry>;\r\n    /**\r\n     * Indicates if selectiveCart feature is enabled based on cart configuration.\r\n     */\r\n    isEnabled(): boolean;\r\n    private isEmpty;\r\n    private isJustLoggedIn;\r\n    private isLoggedIn;\r\n}\r\n"]}