{"version":3,"file":"active-cart.service.d.ts","sources":["active-cart.service.d.ts"],"names":[],"mappingssourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/index';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { User } from '../../model/misc.model';\r\nimport { OrderEntry } from '../../model/order.model';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartService } from './multi-cart.service';\r\nexport declare class ActiveCartService {\r\n    protected store: Store<StateWithMultiCart>;\r\n    protected authService: AuthService;\r\n    protected multiCartService: MultiCartService;\r\n    private readonly PREVIOUS_USER_ID_INITIAL_VALUE;\r\n    private previousUserId;\r\n    private activeCart$;\r\n    private userId;\r\n    private cartId;\r\n    private cartUser;\r\n    private activeCartId$;\r\n    private cartSelector$;\r\n    constructor(store: Store<StateWithMultiCart>, authService: AuthService, multiCartService: MultiCartService);\r\n    private initActiveCart;\r\n    /**\r\n     * Returns active cart\r\n     */\r\n    getActive(): Observable<Cart>;\r\n    /**\r\n     * Returns active cart id\r\n     */\r\n    getActiveCartId(): Observable<string>;\r\n    /**\r\n     * Returns cart entries\r\n     */\r\n    getEntries(): Observable<OrderEntry[]>;\r\n    /**\r\n     * Returns cart loading state\r\n     */\r\n    getLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns true when cart is stable (not loading and not pending processes on cart)\r\n     */\r\n    isStable(): Observable<boolean>;\r\n    private loadOrMerge;\r\n    private load;\r\n    private addEntriesGuestMerge;\r\n    private requireLoadedCartForGuestMerge;\r\n    private isCartCreating;\r\n    private requireLoadedCart;\r\n    /**\r\n     * Add entry to active cart\r\n     *\r\n     * @param productCode\r\n     * @param quantity\r\n     */\r\n    addEntry(productCode: string, quantity: number): void;\r\n    /**\r\n     * Remove entry\r\n     *\r\n     * @param entry\r\n     */\r\n    removeEntry(entry: OrderEntry): void;\r\n    /**\r\n     * Update entry\r\n     *\r\n     * @param entryNumber\r\n     * @param quantity\r\n     */\r\n    updateEntry(entryNumber: number, quantity: number): void;\r\n    /**\r\n     * Returns cart entry\r\n     *\r\n     * @param productCode\r\n     */\r\n    getEntry(productCode: string): Observable<OrderEntry>;\r\n    /**\r\n     * Assign email to cart\r\n     *\r\n     * @param email\r\n     */\r\n    addEmail(email: string): void;\r\n    /**\r\n     * Get assigned user to cart\r\n     */\r\n    getAssignedUser(): Observable<User>;\r\n    /**\r\n     * Returns true for guest cart\r\n     */\r\n    isGuestCart(): boolean;\r\n    /**\r\n     * Add multiple entries to a cart\r\n     *\r\n     * @param cartEntries : list of entries to add (OrderEntry[])\r\n     */\r\n    addEntries(cartEntries: OrderEntry[]): void;\r\n    private isEmail;\r\n    /**\r\n     * Temporary method to merge guest cart with user cart because of backend limitation\r\n     * This is for an edge case\r\n     */\r\n    private guestCartMerge;\r\n    private isEmpty;\r\n    private isJustLoggedIn;\r\n}\r\n"]}