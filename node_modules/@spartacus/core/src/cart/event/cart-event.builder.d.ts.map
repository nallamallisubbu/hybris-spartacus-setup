{"version":3,"file":"cart-event.builder.d.ts","sources":["cart-event.builder.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ActionsSubject } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { EventService } from '../../event/event.service';\r\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\r\nimport { ActiveCartService } from '../facade/active-cart.service';\r\n/**\r\n * Registers events for the active cart\r\n */\r\nexport declare class CartEventBuilder {\r\n    protected actionsSubject: ActionsSubject;\r\n    protected event: EventService;\r\n    protected activeCartService: ActiveCartService;\r\n    constructor(actionsSubject: ActionsSubject, event: EventService, activeCartService: ActiveCartService);\r\n    /**\r\n     * Registers events for the active cart\r\n     */\r\n    protected register(): void;\r\n    /**\r\n     * Register events for adding entry to the active cart\r\n     */\r\n    protected registerAddEntry(): void;\r\n    /**\r\n     * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\r\n     *\r\n     * @param mapping mapping declaration - from `action` string type to `event` class type\r\n     *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\r\n     */\r\n    protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void;\r\n    /**\r\n     * Returns a stream of actions only of a given type(s)\r\n     *\r\n     * @param actionType type(s) of actions\r\n     */\r\n    protected getAction(actionType: string | string[]): Observable<{\r\n        type: string;\r\n        payload?: any;\r\n    }>;\r\n}\r\n"]}