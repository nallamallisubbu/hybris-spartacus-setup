{"version":3,"file":"cart.effect.d.ts","sources":["cart.effect.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Actions } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { CartConnector } from '../../connectors/cart/cart.connector';\r\nimport { CartActions } from '../actions/index';\r\nimport { StateWithMultiCart } from '../multi-cart-state';\r\nexport declare class CartEffects {\r\n    private actions$;\r\n    private cartConnector;\r\n    private store;\r\n    private contextChange$;\r\n    loadCart$: Observable<CartActions.LoadCartFail | CartActions.LoadCartSuccess | CartActions.RemoveCart>;\r\n    createCart$: Observable<CartActions.MergeCartSuccess | CartActions.CreateCartSuccess | CartActions.CreateCartFail | CartActions.SetTempCart>;\r\n    mergeCart$: Observable<CartActions.CreateCart>;\r\n    refresh$: Observable<CartActions.LoadCart | CartActions.CartProcessesDecrement>;\r\n    refreshWithoutProcesses$: Observable<CartActions.LoadCart>;\r\n    resetCartDetailsOnSiteContextChange$: Observable<CartActions.ResetCartDetails>;\r\n    addEmail$: Observable<CartActions.AddEmailToCartSuccess | CartActions.AddEmailToCartFail | CartActions.LoadCart>;\r\n    deleteCart$: Observable<CartActions.DeleteCartSuccess | CartActions.DeleteCartFail | CartActions.LoadCart>;\r\n    constructor(actions$: Actions, cartConnector: CartConnector, store: Store<StateWithMultiCart>);\r\n}\r\n"]}