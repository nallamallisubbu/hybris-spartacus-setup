{"version":3,"file":"user-address.service.d.ts","sources":["user-address.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Address, Country, Region } from '../../model/address.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { StateWithUser } from '../store/user-state';\r\nexport declare class UserAddressService {\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\r\n    protected authService: AuthService;\r\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService);\r\n    /**\r\n     * Retrieves user's addresses\r\n     */\r\n    loadAddresses(): void;\r\n    /**\r\n     * Adds user address\r\n     * @param address a user address\r\n     */\r\n    addUserAddress(address: Address): void;\r\n    /**\r\n     * Sets user address as default\r\n     * @param addressId a user address ID\r\n     */\r\n    setAddressAsDefault(addressId: string): void;\r\n    /**\r\n     * Updates existing user address\r\n     * @param addressId a user address ID\r\n     * @param address a user address\r\n     */\r\n    updateUserAddress(addressId: string, address: Address): void;\r\n    /**\r\n     * Deletes existing user address\r\n     * @param addressId a user address ID\r\n     */\r\n    deleteUserAddress(addressId: string): void;\r\n    /**\r\n     * Returns addresses\r\n     */\r\n    getAddresses(): Observable<Address[]>;\r\n    /**\r\n     * Returns a loading flag for addresses\r\n     */\r\n    getAddressesLoading(): Observable<boolean>;\r\n    getAddressesLoadedSuccess(): Observable<boolean>;\r\n    /**\r\n     * Retrieves delivery countries\r\n     */\r\n    loadDeliveryCountries(): void;\r\n    /**\r\n     * Returns all delivery countries\r\n     */\r\n    getDeliveryCountries(): Observable<Country[]>;\r\n    /**\r\n     * Returns a country based on the provided `isocode`\r\n     * @param isocode an isocode for a country\r\n     */\r\n    getCountry(isocode: string): Observable<Country>;\r\n    /**\r\n     * Retrieves regions for specified country by `countryIsoCode`\r\n     * @param countryIsoCode\r\n     */\r\n    loadRegions(countryIsoCode: string): void;\r\n    /**\r\n     * Clear regions in store - useful when changing country\r\n     */\r\n    clearRegions(): void;\r\n    /**\r\n     * Returns all regions\r\n     */\r\n    getRegions(countryIsoCode: string): Observable<Region[]>;\r\n}\r\n"]}