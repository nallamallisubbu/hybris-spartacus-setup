{"version":3,"file":"user-consent.service.d.ts","sources":["user-consent.service.d.ts"],"names":[],"mappingssourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { StateWithUser } from '../store/user-state';\r\nexport declare class UserConsentService {\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\r\n    protected authService: AuthService;\r\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService);\r\n    /**\r\n     * Retrieves all consents.\r\n     */\r\n    loadConsents(): void;\r\n    /**\r\n     * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\r\n     * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\r\n     */\r\n    getConsents(loadIfMissing?: boolean): Observable<ConsentTemplate[]>;\r\n    /**\r\n     * Returns the consents loading flag\r\n     */\r\n    getConsentsResultLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns the consents success flag\r\n     */\r\n    getConsentsResultSuccess(): Observable<boolean>;\r\n    /**\r\n     * Returns the consents error flag\r\n     */\r\n    getConsentsResultError(): Observable<boolean>;\r\n    /**\r\n     * Resets the processing state for consent retrieval\r\n     */\r\n    resetConsentsProcessState(): void;\r\n    /**\r\n     * Returns the registered consent for the given template ID.\r\n     *\r\n     * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\r\n     *\r\n     * @param templateId a template ID by which to filter the registered templates.\r\n     */\r\n    getConsent(templateId: string): Observable<Consent>;\r\n    /**\r\n     * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\r\n     * Otherwise, `false` is returned.\r\n     *\r\n     * @param consent to check\r\n     */\r\n    isConsentGiven(consent: Consent): boolean;\r\n    /**\r\n     * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\r\n     * Otherwise, `false` is returned.\r\n     *\r\n     * @param consent to check\r\n     */\r\n    isConsentWithdrawn(consent: Consent): boolean;\r\n    /**\r\n     * Give consent for specified consent template ID and version.\r\n     * @param consentTemplateId a template ID for which to give a consent\r\n     * @param consentTemplateVersion a template version for which to give a consent\r\n     */\r\n    giveConsent(consentTemplateId: string, consentTemplateVersion: number): void;\r\n    /**\r\n     * Returns the give consent process loading flag\r\n     */\r\n    getGiveConsentResultLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns the give consent process success flag\r\n     */\r\n    getGiveConsentResultSuccess(): Observable<boolean>;\r\n    /**\r\n     * Returns the give consent process error flag\r\n     */\r\n    getGiveConsentResultError(): Observable<boolean>;\r\n    /**\r\n     * Resents the give consent process flags\r\n     */\r\n    resetGiveConsentProcessState(): void;\r\n    /**\r\n     * Withdraw consent for the given `consentCode`\r\n     * @param consentCode for which to withdraw the consent\r\n     */\r\n    withdrawConsent(consentCode: string): void;\r\n    /**\r\n     * Returns the withdraw consent process loading flag\r\n     */\r\n    getWithdrawConsentResultLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns the withdraw consent process success flag\r\n     */\r\n    getWithdrawConsentResultSuccess(): Observable<boolean>;\r\n    /**\r\n     * Returns the withdraw consent process error flag\r\n     */\r\n    getWithdrawConsentResultError(): Observable<boolean>;\r\n    /**\r\n     * Resets the process flags for withdraw consent\r\n     */\r\n    resetWithdrawConsentProcessState(): void;\r\n    /**\r\n     * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\r\n     * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\r\n     *\r\n     * @param templateList a list of consent templates to filter\r\n     * @param hideTemplateIds template IDs to hide\r\n     */\r\n    filterConsentTemplates(templateList: ConsentTemplate[], hideTemplateIds?: string[]): ConsentTemplate[];\r\n}\r\n"]}