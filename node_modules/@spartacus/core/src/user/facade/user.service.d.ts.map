{"version":3,"file":"user.service.d.ts","sources":["user.service.d.ts"],"names":[],"mappingssourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Title, User, UserSignUp } from '../../model/misc.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { StateWithUser } from '../store/user-state';\r\nexport declare class UserService {\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\r\n    protected authService: AuthService;\r\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService);\r\n    /**\r\n     * Returns a user\r\n     */\r\n    get(): Observable<User>;\r\n    /**\r\n     * Loads the user's details\r\n     */\r\n    load(): void;\r\n    /**\r\n     * Register a new user\r\n     *\r\n     * @param submitFormData as UserRegisterFormData\r\n     */\r\n    register(userRegisterFormData: UserSignUp): void;\r\n    /**\r\n     * Register a new user from guest\r\n     *\r\n     * @param guid\r\n     * @param password\r\n     */\r\n    registerGuest(guid: string, password: string): void;\r\n    /**\r\n     * Returns the register user process loading flag\r\n     */\r\n    getRegisterUserResultLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns the register user process success flag\r\n     */\r\n    getRegisterUserResultSuccess(): Observable<boolean>;\r\n    /**\r\n     * Returns the register user process error flag\r\n     */\r\n    getRegisterUserResultError(): Observable<boolean>;\r\n    /**\r\n     * Resets the register user process flags\r\n     */\r\n    resetRegisterUserProcessState(): void;\r\n    /**\r\n     * Remove user account, that's also called close user's account\r\n     */\r\n    remove(): void;\r\n    /**\r\n     * Returns the remove user loading flag\r\n     */\r\n    getRemoveUserResultLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns the remove user failure outcome.\r\n     */\r\n    getRemoveUserResultError(): Observable<boolean>;\r\n    /**\r\n     * Returns the remove user process success outcome.\r\n     */\r\n    getRemoveUserResultSuccess(): Observable<boolean>;\r\n    /**\r\n     * Resets the remove user process state. The state needs to be reset after the process\r\n     * concludes, regardless if it's a success or an error\r\n     */\r\n    resetRemoveUserProcessState(): void;\r\n    /**\r\n     * Returns titles\r\n     */\r\n    getTitles(): Observable<Title[]>;\r\n    /**\r\n     * Retrieves titles\r\n     */\r\n    loadTitles(): void;\r\n    /**\r\n     * Return whether user's password is successfully reset\r\n     */\r\n    isPasswordReset(): Observable<boolean>;\r\n    /**\r\n     * Updates the user's details\r\n     * @param userDetails to be updated\r\n     */\r\n    updatePersonalDetails(userDetails: User): void;\r\n    /**\r\n     * Returns the update user's personal details loading flag\r\n     */\r\n    getUpdatePersonalDetailsResultLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns the update user's personal details error flag\r\n     */\r\n    getUpdatePersonalDetailsResultError(): Observable<boolean>;\r\n    /**\r\n     * Returns the update user's personal details success flag\r\n     */\r\n    getUpdatePersonalDetailsResultSuccess(): Observable<boolean>;\r\n    /**\r\n     * Resets the update user details processing state\r\n     */\r\n    resetUpdatePersonalDetailsProcessingState(): void;\r\n    /**\r\n     * Reset new password.  Part of the forgot password flow.\r\n     * @param token\r\n     * @param password\r\n     */\r\n    resetPassword(token: string, password: string): void;\r\n    requestForgotPasswordEmail(userEmailAddress: string): void;\r\n    /**\r\n     * Updates the user's email\r\n     */\r\n    updateEmail(password: string, newUid: string): void;\r\n    /**\r\n     * Returns the update user's email success flag\r\n     */\r\n    getUpdateEmailResultSuccess(): Observable<boolean>;\r\n    /**\r\n     * Returns the update user's email error flag\r\n     */\r\n    getUpdateEmailResultError(): Observable<boolean>;\r\n    /**\r\n     * Returns the update user's email loading flag\r\n     */\r\n    getUpdateEmailResultLoading(): Observable<boolean>;\r\n    /**\r\n     * Resets the update user's email processing state\r\n     */\r\n    resetUpdateEmailResultState(): void;\r\n    /**\r\n     * Updates the password for the user\r\n     * @param oldPassword the current password that will be changed\r\n     * @param newPassword the new password\r\n     */\r\n    updatePassword(oldPassword: string, newPassword: string): void;\r\n    /**\r\n     * Returns the update password loading flag\r\n     */\r\n    getUpdatePasswordResultLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns the update password failure outcome.\r\n     */\r\n    getUpdatePasswordResultError(): Observable<boolean>;\r\n    /**\r\n     * Returns the update password process success outcome.\r\n     */\r\n    getUpdatePasswordResultSuccess(): Observable<boolean>;\r\n    /**\r\n     * Resets the update password process state. The state needs to be reset after the process\r\n     * concludes, regardless if it's a success or an error\r\n     */\r\n    resetUpdatePasswordProcessState(): void;\r\n}\r\n"]}