{"version":3,"file":"consent.service.d.ts","sources":["consent.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\r\nimport { AnonymousConsent, Consent } from '../../model/index';\r\nimport { UserConsentService } from './user-consent.service';\r\n/**\r\n * Unified facade for both anonymous and registered user consents.\r\n */\r\nexport declare class ConsentService {\r\n    protected anonymousConsentsService: AnonymousConsentsService;\r\n    protected userConsentService: UserConsentService;\r\n    constructor(anonymousConsentsService: AnonymousConsentsService, userConsentService: UserConsentService);\r\n    /**\r\n     * Returns either anonymous consent or registered consent as they are emmited.\r\n     * @param templateCode for which to return either anonymous or registered consent.\r\n     */\r\n    getConsent(templateCode: string): Observable<AnonymousConsent | Consent>;\r\n    /**\r\n     * Checks if the `templateId`'s template has a given consent.\r\n     * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\r\n     *\r\n     * @param templateId of a template which's consent should be checked\r\n     */\r\n    checkConsentGivenByTemplateId(templateId: string): Observable<boolean>;\r\n    /**\r\n     * Checks if the `templateId`'s template has a withdrawn consent.\r\n     * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\r\n     *\r\n     * @param templateId of a template which's consent should be checked\r\n     */\r\n    checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean>;\r\n    /**\r\n     *\r\n     * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\r\n     *\r\n     * @param consent a consent to check\r\n     */\r\n    isConsentGiven(consent: AnonymousConsent | Consent): boolean;\r\n    /**\r\n     *\r\n     * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\r\n     *\r\n     * @param consent a consent to check\r\n     */\r\n    isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean;\r\n    /**\r\n     * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\r\n     */\r\n    isAnonymousConsentType(consent: AnonymousConsent | Consent): consent is AnonymousConsent;\r\n    /**\r\n     * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\r\n     */\r\n    isConsentType(consent: AnonymousConsent | Consent): consent is Consent;\r\n}\r\n"]}