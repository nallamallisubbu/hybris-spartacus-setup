{"version":3,"file":"user-payment.service.d.ts","sources":["user-payment.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Country } from '../../model/address.model';\r\nimport { PaymentDetails } from '../../model/cart.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { StateWithUser } from '../store/user-state';\r\nexport declare class UserPaymentService {\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\r\n    protected authService: AuthService;\r\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService);\r\n    /**\r\n     * Loads all user's payment methods.\r\n     */\r\n    loadPaymentMethods(): void;\r\n    /**\r\n     * Returns all user's payment methods\r\n     */\r\n    getPaymentMethods(): Observable<PaymentDetails[]>;\r\n    /**\r\n     * Returns a loading flag for payment methods\r\n     */\r\n    getPaymentMethodsLoading(): Observable<boolean>;\r\n    getPaymentMethodsLoadedSuccess(): Observable<boolean>;\r\n    /**\r\n     * Sets the payment as a default one\r\n     * @param paymentMethodId a payment method ID\r\n     */\r\n    setPaymentMethodAsDefault(paymentMethodId: string): void;\r\n    /**\r\n     * Deletes the payment method\r\n     *\r\n     * @param paymentMethodId a payment method ID\r\n     */\r\n    deletePaymentMethod(paymentMethodId: string): void;\r\n    /**\r\n     * Returns all billing countries\r\n     */\r\n    getAllBillingCountries(): Observable<Country[]>;\r\n    /**\r\n     * Retrieves billing countries\r\n     */\r\n    loadBillingCountries(): void;\r\n}\r\n"]}