{"version":3,"file":"user-interests.service.d.ts","sources":["user-interests.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { NotificationType, ProductInterestEntryRelation, ProductInterestSearchResult } from '../../model/product-interest.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { StateWithUser } from '../store/user-state';\r\nexport declare class UserInterestsService {\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\r\n    protected authService: AuthService;\r\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService);\r\n    /**\r\n     * Retrieves an product interest list\r\n     * @param pageSize page size\r\n     * @param currentPage current page\r\n     * @param sort sort\r\n     */\r\n    loadProductInterests(pageSize?: number, currentPage?: number, sort?: string, productCode?: string, notificationType?: NotificationType): void;\r\n    /**\r\n     * Returns product interests\r\n     */\r\n    getProductInterests(): Observable<ProductInterestSearchResult>;\r\n    /**\r\n     * Returns product interests\r\n     * @param pageSize the page size\r\n     */\r\n    getAndLoadProductInterests(pageSize?: number): Observable<ProductInterestSearchResult>;\r\n    /**\r\n     * Returns a loading flag for product interests\r\n     */\r\n    getProdutInterestsLoading(): Observable<boolean>;\r\n    /**\r\n     * Removes a ProductInterestRelation\r\n     * @param item product interest relation item\r\n     * @param singleDelete flag to delete only one interest\r\n     */\r\n    removeProdutInterest(item: ProductInterestEntryRelation, singleDelete?: boolean): void;\r\n    /**\r\n     * Returns a loading flag for removing product interests.\r\n     */\r\n    getRemoveProdutInterestLoading(): Observable<boolean>;\r\n    /**\r\n     * Returns a success flag for removing a product interests.\r\n     */\r\n    getRemoveProdutInterestSuccess(): Observable<boolean>;\r\n    /**\r\n     * Add a new product interest.\r\n     *\r\n     * @param productCode the product code\r\n     * @param notificationType the notification type\r\n     */\r\n    addProductInterest(productCode: string, notificationType: NotificationType): void;\r\n    /**\r\n     * Returns a success flag for adding a product interest.\r\n     */\r\n    getAddProductInterestSuccess(): Observable<boolean>;\r\n    /**\r\n     * Returns a error flag for adding a product interest.\r\n     */\r\n    getAddProductInterestError(): Observable<boolean>;\r\n    /**\r\n     * Reset product interest adding state.\r\n     */\r\n    resetAddInterestState(): void;\r\n    /**\r\n     * Reset product interest removing state.\r\n     */\r\n    resetRemoveInterestState(): void;\r\n    /**\r\n     * Clears product interests\r\n     */\r\n    clearProductInterests(): void;\r\n}\r\n"]}