{"version":3,"file":"global-message.service.d.ts","sources":["global-message.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Translatable } from '../../i18n/translatable';\r\nimport { GlobalMessageType } from '../models/global-message.model';\r\nimport { GlobalMessageEntities, StateWithGlobalMessage } from '../store/global-message-state';\r\nexport declare class GlobalMessageService {\r\n    protected store: Store<StateWithGlobalMessage>;\r\n    constructor(store: Store<StateWithGlobalMessage>);\r\n    /**\r\n     * Get all global messages\r\n     */\r\n    get(): Observable<GlobalMessageEntities>;\r\n    /**\r\n     * Add one message into store\r\n     * @param text: string | Translatable\r\n     * @param type: GlobalMessageType object\r\n     * @param timeout: number\r\n     */\r\n    add(text: string | Translatable, type: GlobalMessageType, timeout?: number): void;\r\n    /**\r\n     * Remove message(s) from store\r\n     * @param type: GlobalMessageType\r\n     * @param index:optional. Without it, messages will be removed by type; otherwise,\r\n     * message will be removed from list by index.\r\n     */\r\n    remove(type: GlobalMessageType, index?: number): void;\r\n}\r\n"]}