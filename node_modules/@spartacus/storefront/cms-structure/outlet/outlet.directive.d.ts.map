{"version":3,"file":"outlet.directive.d.ts","sources":["outlet.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentFactory, ComponentRef, EmbeddedViewRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\r\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\r\nimport { OutletRendererService } from './outlet-renderer.service';\r\nimport { OutletPosition } from './outlet.model';\r\nimport { OutletService } from './outlet.service';\r\nexport declare class OutletDirective implements OnDestroy, OnChanges {\r\n    private vcr;\r\n    private templateRef;\r\n    private outletService;\r\n    private deferLoaderService;\r\n    private outletRendererService;\r\n    private renderedTemplate;\r\n    renderedComponents: Map<OutletPosition, (ComponentRef<any> | EmbeddedViewRef<any>)[]>;\r\n    cxOutlet: string;\r\n    cxOutletContext: any;\r\n    /**\r\n     * Defers loading options for the the templates of this outlet.\r\n     */\r\n    cxOutletDefer: IntersectionOptions;\r\n    loaded: EventEmitter<Boolean>;\r\n    subscription: Subscription;\r\n    constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, deferLoaderService: DeferLoaderService, outletRendererService: OutletRendererService);\r\n    render(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    private deferLoading;\r\n    private build;\r\n    private buildOutlet;\r\n    private create;\r\n    /**\r\n     * Returns the closest `HtmlElement`, by iterating over the\r\n     * parent nodes of the given element.\r\n     *\r\n     * We avoid traversing the parent _elements_, as this is blocking\r\n     * ie11 implementations. One of the spare exclusions we make to not\r\n     * supporting ie11.\r\n     *\r\n     * @param element\r\n     */\r\n    private getHostElement;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}