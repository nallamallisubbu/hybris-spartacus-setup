{"version":3,"file":"cms-page-guard.service.d.ts","sources":["cms-page-guard.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { CmsActivatedRouteSnapshot, CmsService, Page, PageContext, SemanticPathService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CmsGuardsService } from '../services/cms-guards.service';\r\nimport { CmsI18nService } from '../services/cms-i18n.service';\r\nimport { CmsRoutesService } from '../services/cms-routes.service';\r\nimport { CmsComponentsService } from '../services';\r\n/**\r\n * Helper service for `CmsPageGuard`\r\n */\r\nexport declare class CmsPageGuardService {\r\n    protected semanticPathService: SemanticPathService;\r\n    protected cmsService: CmsService;\r\n    protected cmsRoutes: CmsRoutesService;\r\n    protected cmsI18n: CmsI18nService;\r\n    protected cmsGuards: CmsGuardsService;\r\n    protected cmsComponentsService: CmsComponentsService;\r\n    constructor(semanticPathService: SemanticPathService, cmsService: CmsService, cmsRoutes: CmsRoutesService, cmsI18n: CmsI18nService, cmsGuards: CmsGuardsService, cmsComponentsService: CmsComponentsService);\r\n    /**\r\n     * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\r\n     *\r\n     * Based on `cmsComponents` config for the components in the page:\r\n     * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\r\n     * - If all components' guards emitted true, then the route can be activated\r\n     * - Then we trigger loading of configured i18n chunks in parallel\r\n     * - And we register the configured children routes of cms components\r\n     *\r\n     * @param pageContext current cms page context\r\n     * @param pageData cms page data\r\n     * @param route activated route snapshot\r\n     * @param state router state snapshot\r\n     *\r\n     * @returns boolean observable - whether the route can be activated\r\n     */\r\n    canActivatePage(pageContext: PageContext, pageData: Page, route: CmsActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>;\r\n    /**\r\n     * Activates the \"NOT FOUND\" cms page.\r\n     *\r\n     * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\r\n     * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\r\n     */\r\n    canActivateNotFoundPage(pageContext: PageContext, route: CmsActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>;\r\n}\r\n"]}