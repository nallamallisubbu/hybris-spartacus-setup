{"version":3,"file":"trap-focus.directive.d.ts","sources":["trap-focus.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnInit } from '@angular/core';\r\nimport { TrapFocusConfig } from '../keyboard-focus.model';\r\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\r\nimport { TrapFocusService } from './trap-focus.service';\r\n/**\r\n * Directive that keeps the focus inside the focussable child elements,\r\n * also known as a _focus trap_.\r\n */\r\nexport declare class TrapFocusDirective extends TabFocusDirective implements OnInit {\r\n    protected elementRef: ElementRef;\r\n    protected service: TrapFocusService;\r\n    protected defaultConfig: TrapFocusConfig;\r\n    protected config: TrapFocusConfig;\r\n    handleTrapDown: (event: KeyboardEvent) => void;\r\n    handleTrapUp: (event: KeyboardEvent) => void;\r\n    constructor(elementRef: ElementRef, service: TrapFocusService);\r\n    /**\r\n     * Moves the focus of the element reference up or down, depending on the increment.\r\n     * The focus of the element is trapped to avoid it from going out of the group.\r\n     *\r\n     * @param event UIEvent that is used to get the target element. The event is blocked\r\n     *   from standard execution and further bubbling.\r\n     * @param increment indicates whether the next or previous is focussed.\r\n     */\r\n    protected moveFocus(event: UIEvent, increment: number): void;\r\n}\r\n"]}