{"version":3,"file":"auto-focus.directive.d.ts","sources":["auto-focus.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef } from '@angular/core';\r\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\r\nimport { AutoFocusConfig } from '../keyboard-focus.model';\r\nimport { AutoFocusService } from './auto-focus.service';\r\n/**\r\n * Directive that focus the first nested _focusable_ element based on state and configuration:\r\n *\r\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\r\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\r\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\r\n * 4. first focusable element\r\n * 5. the host element, in case the configured CSS selector is `:host`.\r\n *\r\n * Example configurations:\r\n *\r\n * `<div cxAutoFocus>[...]</div>`\r\n *\r\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\r\n *\r\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\r\n *\r\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\r\n *\r\n */\r\nexport declare class AutoFocusDirective extends EscapeFocusDirective implements AfterViewInit {\r\n    protected elementRef: ElementRef;\r\n    protected service: AutoFocusService;\r\n    /** The AutoFocusDirective will be using autofocus by default  */\r\n    protected defaultConfig: AutoFocusConfig;\r\n    protected config: AutoFocusConfig;\r\n    constructor(elementRef: ElementRef, service: AutoFocusService);\r\n    /**\r\n     * Focus the element explicitly if it was focussed before.\r\n     */\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * Mimic the focus without setting the actual focus on the host. The first\r\n     * focusable child element will be focussed.\r\n     */\r\n    handleFocus(event?: KeyboardEvent): void;\r\n    /**\r\n     * Helper function to get the first focusable child element\r\n     */\r\n    protected get hasPersistedFocus(): boolean;\r\n    /**\r\n     * Helper function to indicate whether we should use autofocus for the\r\n     * child elements.\r\n     */\r\n    protected get shouldAutofocus(): boolean;\r\n    /**\r\n     * Helper function to get the first focusable child element.\r\n     *\r\n     * We keep this private to not polute the API.\r\n     */\r\n    private get firstFocusable();\r\n}\r\n"]}