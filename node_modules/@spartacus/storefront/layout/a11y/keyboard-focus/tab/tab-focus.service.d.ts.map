{"version":3,"file":"tab-focus.service.d.ts","sources":["tab-focus.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { AutoFocusService } from '../autofocus/auto-focus.service';\r\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\r\nexport declare class TabFocusService extends AutoFocusService {\r\n    /**\r\n     * Moves to the next (or previous) tab.\r\n     */\r\n    moveTab(host: HTMLElement, config: TabFocusConfig, increment: MOVE_FOCUS, event: KeyboardEvent): void;\r\n    /**\r\n     * builds out virtual slides out of the full scrollable area, to allow\r\n     * for maximum flexibility for the underlying layout without using hardcoded\r\n     * slide sizes.\r\n     */\r\n    protected findNextScrollable(host: HTMLElement, config: TabFocusConfig, increment: MOVE_FOCUS): HTMLElement;\r\n    protected findNext(host: HTMLElement, config: TabFocusConfig, increment: MOVE_FOCUS): HTMLElement;\r\n    /**\r\n     * Returns the active focusable child element. If there's no active\r\n     * focusable child element, the first focusable child is returned.\r\n     */\r\n    protected getActiveChild(host: HTMLElement, config: TabFocusConfig): HTMLElement;\r\n    protected getChildren(host: HTMLElement, config: TabFocusConfig): HTMLElement[];\r\n    /**\r\n     * Returns all focusable child elements of the host element.\r\n     *\r\n     * @param host The host element is used to query child focusable elements.\r\n     * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\r\n     * @param invisible Indicates if invisible child elements should be returned, defaults to false.\r\n     */\r\n    findFocusable(host: HTMLElement, locked?: boolean, invisible?: boolean): HTMLElement[];\r\n    protected isActive(el: HTMLElement): boolean;\r\n}\r\n"]}