{"version":3,"file":"base-focus.directive.d.ts","sources":["base-focus.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnInit } from '@angular/core';\r\nimport { BaseFocusConfig } from '../keyboard-focus.model';\r\nimport { BaseFocusService } from './base-focus.service';\r\n/**\r\n * Abstract directive that provides a common interface for all focus directives:\r\n * - Block Focus\r\n * - Persist Focus\r\n * - Escape Focus\r\n * - Auto Focus\r\n * - Tab Focus\r\n * - Trap Focus\r\n * - Lock Focus\r\n */\r\nexport declare abstract class BaseFocusDirective implements OnInit {\r\n    protected elementRef: ElementRef<HTMLElement>;\r\n    protected service: BaseFocusService;\r\n    /**\r\n     * Optional configuration for the focus directive drives the behaviour of the keyboard\r\n     * focus directive.\r\n     */\r\n    protected config: BaseFocusConfig;\r\n    /**\r\n     * A default config can be provided for each directive if a specific focus directive\r\n     * is used directly. i.e. `<div cxAutoFocus></div>`\r\n     */\r\n    protected defaultConfig: BaseFocusConfig;\r\n    tabindex: number;\r\n    constructor(elementRef: ElementRef<HTMLElement>, service: BaseFocusService);\r\n    ngOnInit(): void;\r\n    /**\r\n     * Override the (input) config if it undefined or an empty string, with the\r\n     * `defaultConfig`. The `defaultConfig` might be specified for each directive\r\n     * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\r\n     * specific (inherited) defaultConfig will be used.\r\n     */\r\n    protected setDefaultConfiguration(): void;\r\n    /**\r\n     * Helper method to return the host element for the directive\r\n     * given by the `elementRef`.\r\n     */\r\n    protected get host(): HTMLElement;\r\n    /**\r\n     * Force a tabindex on the host element if it is _requried_ to make the element\r\n     * focusable. If the element is focusable by nature or by a given tabindex, the\r\n     * `tabindex` is not applied.\r\n     *\r\n     * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\r\n     */\r\n    protected set requiredTabindex(tabindex: number);\r\n    /**\r\n     * Returns true if the host element does not have a tabindex defined\r\n     * and it also doesn't get focus by browsers nature (i.e. button or\r\n     * active link).\r\n     */\r\n    protected get requiresExplicitTabIndex(): boolean;\r\n}\r\n"]}