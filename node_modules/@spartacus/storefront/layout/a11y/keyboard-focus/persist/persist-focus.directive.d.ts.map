{"version":3,"file":"persist-focus.directive.d.ts","sources":["persist-focus.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, OnInit } from '@angular/core';\r\nimport { BlockFocusDirective } from '../block/block-focus.directive';\r\nimport { PersistFocusConfig } from '../keyboard-focus.model';\r\nimport { PersistFocusService } from './persist-focus.service';\r\n/**\r\n * Directive that provides persistence of the focused state. This is useful\r\n * when a group of focusable elements got refocused or even recreated. That\r\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\r\n *\r\n * The focus state is based on a configured _key_, which can be passed in the\r\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\r\n *\r\n * ```html\r\n * <button cxPersistFocus=\"myKey\"></button>\r\n * <button cxFocus=\"myKey\"></button>\r\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\r\n * ```\r\n *\r\n * The focus state can be part of a focus _group_, so that the state is shared\r\n * and remember for the given group. In order to detect the persistence for a\r\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\r\n *\r\n * ```html\r\n * <button data-cx-focus=\"myKey\"></button>\r\n * ```\r\n *\r\n * Other keyboard focus directives can read the key to understand whether the element\r\n * should retrieve focus.\r\n *\r\n */\r\nexport declare class PersistFocusDirective extends BlockFocusDirective implements OnInit, AfterViewInit {\r\n    protected elementRef: ElementRef;\r\n    protected service: PersistFocusService;\r\n    protected defaultConfig: PersistFocusConfig;\r\n    /**\r\n     * The persistence key can be passed directly or through the `FocusConfig.key`.\r\n     * While this could be considered a global key, the likeliness of conflicts\r\n     * is very small since the key is cleared when the focus is changed.\r\n     */\r\n    protected config: PersistFocusConfig;\r\n    /**\r\n     * The persistence key is maintained in an element attribute for other\r\n     * implementations. This is needed to ensure that we can resolve the focus\r\n     * state in case of a repaint.\r\n     */\r\n    attr: string;\r\n    handleFocus(event?: KeyboardEvent): void;\r\n    constructor(elementRef: ElementRef, service: PersistFocusService);\r\n    ngOnInit(): void;\r\n    protected setDefaultConfiguration(): void;\r\n    /**\r\n     * Focus the element explicitly if it was focused before.\r\n     */\r\n    ngAfterViewInit(): void;\r\n    protected get isPersisted(): boolean;\r\n    /**\r\n     * Returns the key for the host element, which is used to persist the\r\n     * focus state. This is useful in cases where the DOM is rebuild.\r\n     */\r\n    protected get key(): string;\r\n    /**\r\n     * returns the persistence group (if any) for the focusable elements.\r\n     */\r\n    protected get group(): string;\r\n}\r\n"]}