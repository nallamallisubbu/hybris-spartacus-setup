{"version":3,"file":"intersection.service.d.ts","sources":["intersection.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { LayoutConfig } from '../config/layout-config';\r\nimport { IntersectionOptions } from './intersection.model';\r\n/**\r\n * The IntersectionService uses the native IntersectionObserver (v2), which\r\n * can be used to implement pre-loading and deferred loading of DOM content.\r\n *\r\n */\r\nexport declare class IntersectionService {\r\n    protected config: LayoutConfig;\r\n    constructor(config: LayoutConfig);\r\n    /**\r\n     * Returns an Observable that emits only once a boolean value whenever\r\n     * the given element has shown in the view port.\r\n     *\r\n     * The returned observable will only emit the first value. The\r\n     * observable must be cleaned up either way, since the value might never emit; it\r\n     *  depends on whether the element appears in the view port.\r\n     */\r\n    isIntersected(element: HTMLElement, options?: IntersectionOptions): Observable<boolean>;\r\n    /**\r\n     * Indicates whenever the element intersects the view port. An optional margin\r\n     * is used to intersects before the element shows up in the viewport.\r\n     * A value is emitted each time the element intersects.\r\n     *\r\n     * This is private for now, but could be exposed as a public API\r\n     * to introduce additional (css) render effects to the UI.\r\n     */\r\n    private intersects;\r\n    private getRootMargin;\r\n}\r\n"]}