{"version":3,"file":"defer-loader.service.d.ts","sources":["defer-loader.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { DeferLoadingStrategy } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LayoutConfig } from '../config/layout-config';\r\nimport { IntersectionOptions } from './intersection.model';\r\nimport { IntersectionService } from './intersection.service';\r\n/**\r\n * The defer loading serivce is used to defer loading of DOM elements\r\n * until the elements are required for the user experience.\r\n */\r\nexport declare class DeferLoaderService {\r\n    private platformId;\r\n    protected config: LayoutConfig;\r\n    protected intersectionService: IntersectionService;\r\n    globalLoadStrategy: DeferLoadingStrategy;\r\n    constructor(platformId: Object, config: LayoutConfig, intersectionService: IntersectionService);\r\n    /**\r\n     * Defer loading till the element intersects the viewport.\r\n     *\r\n     * We evaluate whether we instantly load the element for different reasons:\r\n     * - we run in SSR mode\r\n     * - there's no global strategy given\r\n     * - the global loading strategy is set to INSTANT loading,\r\n     *   and the loading strategy in the given is not set to DEFER\r\n     * - the loading strategy in the given options is set to INSTANT\r\n     */\r\n    load(element: HTMLElement, options?: IntersectionOptions): Observable<boolean>;\r\n    private shouldLoadInstantly;\r\n}\r\n"]}