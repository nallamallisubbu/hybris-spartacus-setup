{"version":3,"file":"breakpoint.service.d.ts","sources":["breakpoint.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { WindowRef } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\r\nexport declare class BreakpointService {\r\n    private winRef;\r\n    private config;\r\n    constructor(winRef: WindowRef, config: LayoutConfig);\r\n    get breakpoint$(): Observable<BREAKPOINT>;\r\n    /**\r\n     * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\r\n     * configuration. If no configuration is available for the given breakpoint, the\r\n     * method will return the default values:\r\n     * - xs: 567\r\n     * - sm: 768\r\n     * - md: 992\r\n     * - lg: 1200\r\n     */\r\n    getSize(breakpoint: BREAKPOINT): number;\r\n    /**\r\n     * Returns all available breakpoints for the system.\r\n     */\r\n    get breakpoints(): BREAKPOINT[];\r\n    /**\r\n     * Indicates whether the current screen size is smaller than the maximum size of the\r\n     * given breakpoint.\r\n     *\r\n     * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\r\n     * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\r\n     */\r\n    isDown(breakpoint: BREAKPOINT): Observable<boolean>;\r\n    /**\r\n     * Indicates whether the current screen size is larger than the minimum size of the\r\n     * given breakpoint.\r\n     *\r\n     * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\r\n     * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\r\n     */\r\n    isUp(breakpoint: BREAKPOINT): Observable<boolean>;\r\n    /**\r\n     * Indicates whether the current screen size fits to the given breakpoint\r\n     */\r\n    isEqual(breakpoint: BREAKPOINT): Observable<boolean>;\r\n    protected getBreakpoint(windowWidth: number): BREAKPOINT;\r\n    protected getClosest(windowWidth?: number): BREAKPOINT;\r\n    get window(): Window;\r\n}\r\n"]}