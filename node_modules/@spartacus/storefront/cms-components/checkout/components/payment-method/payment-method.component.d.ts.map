{"version":3,"file":"payment-method.component.d.ts","sources":["payment-method.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ActiveCartService, Address, CheckoutDeliveryService, CheckoutPaymentService, CheckoutService, GlobalMessageService, PaymentDetails, RoutingService, TranslationService, UserPaymentService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Card } from '../../../../shared/components/card/card.component';\r\nimport { ICON_TYPE } from '../../../misc/icon';\r\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\r\nexport declare class PaymentMethodComponent implements OnInit, OnDestroy {\r\n    protected userPaymentService: UserPaymentService;\r\n    protected checkoutService: CheckoutService;\r\n    protected checkoutDeliveryService: CheckoutDeliveryService;\r\n    protected checkoutPaymentService: CheckoutPaymentService;\r\n    protected globalMessageService: GlobalMessageService;\r\n    protected routingService: RoutingService;\r\n    protected checkoutConfigService: CheckoutConfigService;\r\n    protected activatedRoute: ActivatedRoute;\r\n    protected translation: TranslationService;\r\n    protected activeCartService: ActiveCartService;\r\n    iconTypes: typeof ICON_TYPE;\r\n    existingPaymentMethods$: Observable<PaymentDetails[]>;\r\n    isLoading$: Observable<boolean>;\r\n    cards$: Observable<{\r\n        content: Card;\r\n        paymentMethod: PaymentDetails;\r\n    }[]>;\r\n    selectedMethod$: Observable<PaymentDetails>;\r\n    isGuestCheckout: boolean;\r\n    newPaymentFormManuallyOpened: boolean;\r\n    protected shouldRedirect: boolean;\r\n    protected deliveryAddress: Address;\r\n    protected checkoutStepUrlNext: string;\r\n    protected checkoutStepUrlPrevious: string;\r\n    constructor(userPaymentService: UserPaymentService, checkoutService: CheckoutService, checkoutDeliveryService: CheckoutDeliveryService, checkoutPaymentService: CheckoutPaymentService, globalMessageService: GlobalMessageService, routingService: RoutingService, checkoutConfigService: CheckoutConfigService, activatedRoute: ActivatedRoute, translation: TranslationService, activeCartService: ActiveCartService);\r\n    ngOnInit(): void;\r\n    selectPaymentMethod(paymentDetails: PaymentDetails): void;\r\n    showNewPaymentForm(): void;\r\n    hideNewPaymentForm(): void;\r\n    setPaymentDetails({ paymentDetails, billingAddress, }: {\r\n        paymentDetails: PaymentDetails;\r\n        billingAddress?: Address;\r\n    }): void;\r\n    ngOnDestroy(): void;\r\n    protected getCardIcon(code: string): string;\r\n    protected sendPaymentMethodFailGlobalMessage(field: string): void;\r\n    protected createCard(paymentDetails: PaymentDetails, cardLabels: {\r\n        textDefaultPaymentMethod: string;\r\n        textExpires: string;\r\n        textUseThisPayment: string;\r\n        textSelected: string;\r\n    }, selected: PaymentDetails): Card;\r\n    goNext(): void;\r\n    goPrevious(): void;\r\n}\r\n"]}