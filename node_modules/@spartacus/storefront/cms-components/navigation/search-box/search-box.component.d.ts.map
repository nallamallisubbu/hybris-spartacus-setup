{"version":3,"file":"search-box.component.d.ts","sources":["search-box.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\r\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\r\nimport { SearchBoxComponentService } from './search-box-component.service';\r\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\r\nexport declare class SearchBoxComponent {\r\n    protected searchBoxComponentService: SearchBoxComponentService;\r\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>;\r\n    protected winRef: WindowRef;\r\n    config: SearchBoxConfig;\r\n    /**\r\n     * Sets the search box input field\r\n     */\r\n    set queryText(value: string);\r\n    iconTypes: typeof ICON_TYPE;\r\n    /**\r\n     * In some occasions we need to ignore the close event,\r\n     * for example when we click inside the search result section.\r\n     */\r\n    private ignoreCloseEvent;\r\n    /**\r\n     * The component data is optional, so that this component\r\n     * can be reused without CMS integration.\r\n     */\r\n    constructor(searchBoxComponentService: SearchBoxComponentService, componentData: CmsComponentData<CmsSearchBoxComponent>, winRef: WindowRef);\r\n    results$: Observable<SearchResults>;\r\n    /**\r\n     * Returns the backend configuration or default configuration for the searchbox.\r\n     */\r\n    private get config$();\r\n    /**\r\n     * Closes the searchbox and opens the search result page.\r\n     */\r\n    search(query: string): void;\r\n    /**\r\n     * Opens the typeahead searchbox\r\n     */\r\n    open(): void;\r\n    /**\r\n     * Closes the typehead searchbox.\r\n     */\r\n    close(event: UIEvent, force?: boolean): void;\r\n    protected blurSearchBox(event: UIEvent): void;\r\n    private isSearchboxFocused;\r\n    /**\r\n     * Especially in mobile we do not want the search icon\r\n     * to focus the input again when it's already open.\r\n     * */\r\n    avoidReopen(event: UIEvent): void;\r\n    private getResultElements;\r\n    private getFocusedElement;\r\n    private getFocusedIndex;\r\n    focusPreviousChild(event: any): void;\r\n    focusNextChild(event: any): void;\r\n    /**\r\n     * Opens the PLP with the given query.\r\n     *\r\n     * TODO: if there's a single product match, we could open the PDP.\r\n     */\r\n    launchSearchResult(event: UIEvent, query: string): void;\r\n    /**\r\n     * Disables closing the search result list.\r\n     */\r\n    disableClose(): void;\r\n    /**\r\n     * Clears the search box input field\r\n     */\r\n    clear(el: HTMLInputElement): void;\r\n}\r\n"]}