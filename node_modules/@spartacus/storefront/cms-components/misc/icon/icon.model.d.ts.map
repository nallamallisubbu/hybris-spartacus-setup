{"version":3,"file":"icon.model.d.ts","sources":["icon.model.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export declare enum ICON_TYPE {\r\n    STAR = \"STAR\",\r\n    SEARCH = \"SEARCH\",\r\n    CART = \"CART\",\r\n    INFO = \"INFO\",\r\n    GRID = \"GRID\",\r\n    LIST = \"LIST\",\r\n    CARET_DOWN = \"CARET_DOWN\",\r\n    CARET_LEFT = \"CARET_LEFT\",\r\n    CARET_RIGHT = \"CARET_RIGHT\",\r\n    CLOSE = \"CLOSE\",\r\n    ERROR = \"ERROR\",\r\n    WARNING = \"WARNING\",\r\n    SUCCESS = \"SUCCESS\",\r\n    VISA = \"VISA\",\r\n    MASTER_CARD = \"MASTER_CARD\",\r\n    AMEX = \"AMEX\",\r\n    DINERS_CLUB = \"DINERS_CLUB\",\r\n    CREDIT_CARD = \"CREDIT_CARD\",\r\n    EXPAND = \"EXPAND\",\r\n    COLLAPSE = \"COLLAPSE\",\r\n    RESET = \"RESET\",\r\n    CIRCLE = \"CIRCLE\",\r\n    HEART = \"HEART\",\r\n    EMPTY_HEART = \"EMPTY_HEART\",\r\n    FILTER = \"FILTER\"\r\n}\r\nexport declare abstract class IconConfig {\r\n    icon?: IconOptions;\r\n}\r\nexport interface IconOptions {\r\n    /**\r\n     * Each icon type can be configured with a so-called symbol. The symbol will\r\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\r\n     * a font based icon. The following configuration would map to a fontawesome\r\n     * icon:\r\n     *\r\n     * icon: {\r\n     *   symbols: {\r\n     *     CART: 'fas fa-shopping-cart'\r\n     *   }\r\n     * }\r\n     */\r\n    symbols?: {\r\n        [ICON_TYPE: string]: string;\r\n    };\r\n    /**\r\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\r\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\r\n     * is used for the SVG xlink reference.\r\n     */\r\n    resources?: IconConfigResource[];\r\n}\r\nexport interface IconConfigResource {\r\n    type: IconResourceType | string;\r\n    url?: string;\r\n    types?: (ICON_TYPE | string)[];\r\n}\r\n/**\r\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\r\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\r\n */\r\nexport declare enum IconResourceType {\r\n    /**\r\n     * An svg based icon requires an SVG resource that must be loaded,\r\n     * this is typically a sprite svg file.\r\n     */\r\n    SVG = \"svg\",\r\n    /**\r\n     * A font based ICON might require an additional CSS file to be loaded.\r\n     */\r\n    LINK = \"link\",\r\n    /**\r\n     * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\r\n     * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\r\n     */\r\n    TEXT = \"text\"\r\n}\r\n"]}