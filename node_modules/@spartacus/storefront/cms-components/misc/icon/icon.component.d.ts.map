{"version":3,"file":"icon.component.d.ts","sources":["icon.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2 } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { IconLoaderService } from './icon-loader.service';\r\nimport { ICON_TYPE } from './icon.model';\r\n/**\r\n *\r\n * The icon component can be added in different ways:\r\n *\r\n * With the component selector:\r\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\r\n *\r\n * With the attribute selector:\r\n * `<span cxIcon=\"STAR\"></span>`\r\n *\r\n * Additionally, content can be projected to the icon:\r\n *\r\n * `<button cxIcon=\"HAPPY\">happy label</button>`\r\n *\r\n * The above button would become (based on a TEXT resource type):\r\n * `<button>ðŸ˜Šhappy label</button>`\r\n *\r\n * While the content is projected, the icon itself doesn't require an\r\n * additional DOM node which is an advantage over the component selector.\r\n */\r\nexport declare class IconComponent {\r\n    protected iconLoader: IconLoaderService;\r\n    protected elementRef: ElementRef<HTMLElement>;\r\n    protected renderer: Renderer2;\r\n    /**\r\n     * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\r\n     * accomplish a configurable button in the UI.\r\n     */\r\n    set cxIcon(type: ICON_TYPE);\r\n    /**\r\n     * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\r\n     * accomplish a configurable button in the UI.\r\n     */\r\n    set type(type: ICON_TYPE);\r\n    /**\r\n     * the icon provides an html fragment that is used to add SVG or text based icons.\r\n     */\r\n    icon: SafeHtml;\r\n    /**\r\n     * Maintains the applied style classes so we can remove them when the\r\n     * icon type changes at run time.\r\n     */\r\n    protected styleClasses: string[];\r\n    constructor(iconLoader: IconLoaderService, elementRef: ElementRef<HTMLElement>, renderer: Renderer2);\r\n    protected setIcon(type: ICON_TYPE): void;\r\n    /**\r\n     * Adds the style classes and the link resource (if available).\r\n     */\r\n    protected addStyleClasses(type: ICON_TYPE): void;\r\n    protected get host(): HTMLElement;\r\n}\r\n"]}