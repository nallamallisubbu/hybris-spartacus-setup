{"version":3,"file":"qualtrics-loader.service.d.ts","sources":["qualtrics-loader.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { WindowRef } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nexport declare const QUALTRICS_EVENT_NAME = \"qsi_js_loaded\";\r\n/**\r\n * Service to integration Qualtrics.\r\n *\r\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\r\n * to let Qualtrics evaluate the application.\r\n *\r\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\r\n * data before pulling the QSI API. This is beneficial in a single page application when additional\r\n * data is required before the Qualtrics _creatives_ run.\r\n *\r\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\r\n * the script can be added in alternatives ways.\r\n */\r\nexport declare class QualtricsLoaderService {\r\n    protected winRef: WindowRef;\r\n    protected rendererFactory: RendererFactory2;\r\n    /**\r\n     * Reference to the QSI API.\r\n     */\r\n    protected qsiApi: any;\r\n    /**\r\n     * QSI load event that happens when the QSI JS file is loaded.\r\n     */\r\n    private qsiLoaded$;\r\n    /**\r\n     * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\r\n     *\r\n     * The API is emitted when the JavaScript resource holding this API is fully loaded.\r\n     * The API is also stored locally in the service, in case it's required later on.\r\n     */\r\n    protected qsi$: Observable<any>;\r\n    constructor(winRef: WindowRef, rendererFactory: RendererFactory2);\r\n    /**\r\n     * Starts observing the Qualtrics integration. The integration is based on a\r\n     * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\r\n     * we run the API.\r\n     */\r\n    protected initialize(): void;\r\n    /**\r\n     * Evaluates the Qualtrics project code for the application.\r\n     *\r\n     * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\r\n     * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\r\n     */\r\n    protected run(reload?: boolean): void;\r\n    /**\r\n     * Adds the deployment script to the DOM.\r\n     *\r\n     * The script will not be added twice if it was loaded before. In that case, we use\r\n     * the Qualtrics API directly to _unload_ and _run_ the project.\r\n     */\r\n    addScript(scriptSource: string): void;\r\n    /**\r\n     * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\r\n     * You can observe any data in this method.\r\n     *\r\n     * Defaults to true.\r\n     */\r\n    protected isDataLoaded(): Observable<boolean>;\r\n    /**\r\n     * Indicates if the script is already added to the DOM.\r\n     */\r\n    protected hasScript(source?: string): boolean;\r\n    protected get renderer(): Renderer2;\r\n}\r\n"]}