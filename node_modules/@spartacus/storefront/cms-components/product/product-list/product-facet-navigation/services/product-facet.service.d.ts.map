{"version":3,"file":"product-facet.service.d.ts","sources":["product-facet.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ActivatedRouterStateSnapshot, ProductSearchPage, RoutingService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ProductListComponentService } from '../../container/product-list-component.service';\r\nimport { FacetList } from '../facet.model';\r\n/**\r\n * Provides access to all the facets and active facets for the Product Listing Page.\r\n */\r\nexport declare class ProductFacetService {\r\n    protected routing: RoutingService;\r\n    protected productListComponentService: ProductListComponentService;\r\n    protected readonly routeState$: Observable<ActivatedRouterStateSnapshot>;\r\n    protected readonly searchResult$: Observable<ProductSearchPage>;\r\n    constructor(routing: RoutingService, productListComponentService: ProductListComponentService);\r\n    /**\r\n     * Observes the facets and active facets for the given page. The facet data\r\n     * is provided in a `FacetList`.\r\n     */\r\n    readonly facetList$: Observable<FacetList>;\r\n    /**\r\n     * Filters the current result by verifying if the result is related to the page.\r\n     * This is done to avoid a combination of the next page and the current search results.\r\n     */\r\n    protected filterForPage(state: ActivatedRouterStateSnapshot, page: ProductSearchPage): boolean;\r\n    private mapResults;\r\n    /**\r\n     * filter breadcrumbs which are not actively selected\r\n     * but coming from the route navigation\r\n     */\r\n    private filterBreadcrumbs;\r\n    /**\r\n     * Indicates whether the breadcrumb is related to navigation parameters,\r\n     * since either the category or brand code should match those codes.\r\n     */\r\n    private hasBreadcrumb;\r\n}\r\n"]}