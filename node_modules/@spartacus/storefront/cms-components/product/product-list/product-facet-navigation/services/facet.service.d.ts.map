{"version":3,"file":"facet.service.d.ts","sources":["facet.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Facet } from '@spartacus/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { FacetCollapseState, FacetList } from '../facet.model';\r\nimport { ProductFacetService } from './product-facet.service';\r\n/**\r\n * Provides access to the facets as well as their UI state. The UI state\r\n * represents user related changes on the facets, such as expanding or\r\n * collapsing a facet group or expanding the number of _visible_ facet values.\r\n */\r\nexport declare class FacetService {\r\n    protected productFacetService: ProductFacetService;\r\n    /**\r\n     * An internal map where we keep the UI state of the facets.\r\n     */\r\n    protected facetState: Map<string, BehaviorSubject<FacetCollapseState>>;\r\n    constructor(productFacetService: ProductFacetService);\r\n    /**\r\n     * Observes the facets for the given page and configures the initial UI state.\r\n     *\r\n     * Facets are configured on each emission so that we keep the facet UI state.\r\n     * This is mainly done to keep the state during usage of the facet, but also\r\n     * benefitial when the facets are rebuild while using them.\r\n     */\r\n    facetList$: Observable<FacetList>;\r\n    /**\r\n     * Returns the observed UI state for the facet.\r\n     *\r\n     * The state is initialized using the `initialize` method.\r\n     */\r\n    getState(facet: Facet): Observable<FacetCollapseState>;\r\n    /**\r\n     * Returns the UI state for the facet.\r\n     *\r\n     * The state is initialized using the `initialize` method.\r\n     */\r\n    protected getStateSnapshot(facet: Facet): FacetCollapseState;\r\n    /**\r\n     * Toggles the facet expanded state. If the expanded state becomes false,\r\n     * the visible values will decrease to the top values only.\r\n     *\r\n     * If the optional value argument is provided the expanded state will be set\r\n     * to this value, regardless of the current `expanded` state.\r\n     */\r\n    toggle(facet: Facet, isExpanded: boolean): void;\r\n    /**\r\n     * Increases the visible values to the maximum values of the facet.\r\n     */\r\n    increaseVisibleValues(facet: Facet): void;\r\n    /**\r\n     * Decreases the visible values to the topValueCount.\r\n     *\r\n     * The topValueCount defaults to 6, but can be controlled in\r\n     * the backend as well.\r\n     */\r\n    decreaseVisibleValues(facet: Facet): void;\r\n    /**\r\n     * Persists the facet state and initializes the default values for the top\r\n     * and max visible values.\r\n     */\r\n    protected initialize(facet: Facet): void;\r\n    /**\r\n     * Updates the state of the facet in the local facet map.\r\n     */\r\n    protected updateState(facet: Facet, property: FacetCollapseState): void;\r\n    protected hasState(facet: Facet): boolean;\r\n    getLinkParams(query: string): {\r\n        [key: string]: string;\r\n    };\r\n}\r\n"]}