{"version":3,"file":"item-counter.component.d.ts","sources":["item-counter.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n/**\r\n * Provides a UI to manage the count of the quantity, typically by using\r\n * increase and decrease functionality. The item counter expects an input `FormControl`\r\n * so that the state of the control can be managed outside of this component.\r\n */\r\nexport declare class ItemCounterComponent implements OnInit, OnDestroy {\r\n    /**\r\n     * Holds the value of the counter, the state of the `FormControl`\r\n     * can be managed outside of the item counter.\r\n     */\r\n    control: FormControl;\r\n    /**\r\n     * This can be used in case an item has a minmum order quantity.\r\n     * @default 1\r\n     */\r\n    min: number;\r\n    /**\r\n     * This can be used in case an item has a maximum order quantity.\r\n     */\r\n    max: number;\r\n    /**\r\n     * The step is used to increment the count. It is supposed to be a\r\n     * positive integer or float.\r\n     * @default 1\r\n     */\r\n    step: number;\r\n    /**\r\n     * Indicates that the input can be manually set to zero,\r\n     * despite the fact that the input controls will be limited to\r\n     * the minimum. The zero value can be used to remove an item.\r\n     */\r\n    allowZero: boolean;\r\n    /**\r\n     * In readonly mode the item counter will only be shown as a label,\r\n     * the form controls are not rendered.\r\n     * Please not that readonly is different from the `disabled` form state.\r\n     * @default false\r\n     */\r\n    readonly: boolean;\r\n    private input;\r\n    /**\r\n     * Subscription responsible for auto-correcting control's value when it's invalid.\r\n     */\r\n    private sub;\r\n    handleClick(): void;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    increment(): void;\r\n    decrement(): void;\r\n    /**\r\n     * Validate that the given value is in between\r\n     * the `min` and `max` value. If the value is out\r\n     * of  the min/max range, it will be altered.\r\n     * If `allowZero` is set to true, the 0 value is ignored.\r\n     *\r\n     */\r\n    private getValidCount;\r\n}\r\n"]}