{"version":3,"file":"generic-link.component.d.ts","sources":["generic-link.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Params, Router } from '@angular/router';\r\n/**\r\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\r\n */\r\nexport declare class GenericLinkComponent implements OnChanges {\r\n    protected router: Router;\r\n    constructor(router: Router);\r\n    /**\r\n     * Pattern matching string starting with `http://` or `https://`.\r\n     */\r\n    private readonly PROTOCOL_REGEX;\r\n    /**\r\n     * Used to split url into 2 parts:\r\n     * 1. the path\r\n     * 2. query params + hash fragment\r\n     */\r\n    private readonly URL_SPLIT;\r\n    /**\r\n     * Parsed parts of the @Input `url`, when it's a local URL.\r\n     * It should not be used when the `url` is external.\r\n     * @see `url`\r\n     */\r\n    private routeParts;\r\n    url: string | any[];\r\n    target: string;\r\n    class: string;\r\n    id: string;\r\n    style: string;\r\n    title: string;\r\n    /**\r\n     * Returns true when the @Input `url` is a string starting with `http://` or `https://`.\r\n     */\r\n    isExternalUrl(): boolean;\r\n    get rel(): string;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n     * The part with the path of the local url.\r\n     */\r\n    get routerUrl(): any[];\r\n    /**\r\n     * The part with the query params of the local url.\r\n     */\r\n    get queryParams(): Params;\r\n    /**\r\n     * The part with the hash fragment of the local url.\r\n     */\r\n    get fragment(): string;\r\n    /**\r\n     * Parses the given url and sets the property `urlParts` accordingly.\r\n     */\r\n    private setUrlParts;\r\n    /**\r\n     * Parses the given string into 3 parts:\r\n     * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)\r\n     * - query params (as an object)\r\n     * - hash fragment (string)\r\n     */\r\n    private splitUrl;\r\n    /**\r\n     * Prepends a leading slash to the given URL string, in case it doesn't have it.\r\n     */\r\n    private getAbsoluteUrl;\r\n}\r\n"]}