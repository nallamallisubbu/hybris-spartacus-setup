{"version":3,"file":"media.service.d.ts","sources":["media.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Image } from '@spartacus/core';\r\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\r\nimport { StorefrontConfig } from '../../../storefront-config';\r\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\r\n/**\r\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\r\n * that URLs and sizes are generated for the same media. This helps to improve performance\r\n * across difference devices and layouts.\r\n *\r\n * Media formats are optional, but highly recommended. The format will help the browser to\r\n * identify the right media for the right experience.\r\n *\r\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\r\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\r\n * `occConfig.backend.occ.baseUrl`.\r\n */\r\nexport declare class MediaService {\r\n    protected config: StorefrontConfig;\r\n    /**\r\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\r\n     * driven by configuration only. There's however a change that this service will play a role\r\n     * in the near future, which is why we keep the constructor as-is.\r\n     */\r\n    protected breakpointService: BreakpointService;\r\n    /**\r\n     * The media formats sorted by size. The media format representing the smallest\r\n     * size is sorted on top.\r\n     */\r\n    private _sortedFormats;\r\n    private _reversedFormats;\r\n    constructor(config: StorefrontConfig, \r\n    /**\r\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\r\n     * driven by configuration only. There's however a change that this service will play a role\r\n     * in the near future, which is why we keep the constructor as-is.\r\n     */\r\n    breakpointService: BreakpointService);\r\n    /**\r\n     * Returns a `Media` object with the main media (`src`) and various media (`src`)\r\n     * for specific formats.\r\n     */\r\n    getMedia(mediaContainer: MediaContainer | Image, format?: string, alt?: string): Media;\r\n    /**\r\n     * Creates the media formats in a logical sorted order. The map contains the\r\n     * format key and the format size information. We do this only once for performance\r\n     * benefits.\r\n     */\r\n    protected get sortedFormats(): {\r\n        code: string;\r\n        size: MediaFormatSize;\r\n    }[];\r\n    /**\r\n     * Creates the media formats in a reversed sorted order.\r\n     */\r\n    protected get reversedFormats(): {\r\n        code: string;\r\n        size: MediaFormatSize;\r\n    }[];\r\n    /**\r\n     * Resolves the right media for the given format. The fo\r\n     */\r\n    protected resolveMedia(media: MediaContainer, format?: string): Image;\r\n    /**\r\n     * Validates the format against the given mediaContainer. If there is no format available,\r\n     * or if the mediaContainer doesn't contain a media for the given media, the most optimal\r\n     * format is resolved. If even that is not possible, the first format is returned.\r\n     */\r\n    protected resolveFormat(mediaContainer: MediaContainer, format?: string): string;\r\n    /**\r\n     * Returns the media format code with the best size.\r\n     */\r\n    protected resolveBestFormat(media: MediaContainer | Image): string;\r\n    /**\r\n     * Returns a set of media for the available media formats. Additionally, the congiured media\r\n     * format width is added to the srcset, so that browsers can select the appropriate media.\r\n     */\r\n    protected resolveSrcSet(media: MediaContainer | Image): string;\r\n    /**\r\n     * Resolves the absolute URL for the given url. In most cases, this URL represents\r\n     * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\r\n     */\r\n    protected resolveAbsoluteUrl(url: string): string;\r\n    /**\r\n     * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\r\n     * `backend.occ.baseUrl`.\r\n     *\r\n     * The `backend.media.baseUrl` can be used to load media from a different location.\r\n     *\r\n     * In Commerce Cloud, a differnt location could mean a different \"aspect\".\r\n     */\r\n    protected getBaseUrl(): string;\r\n}\r\n"]}