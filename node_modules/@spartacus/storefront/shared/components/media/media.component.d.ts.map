{"version":3,"file":"media.component.d.ts","sources":["media.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges } from '@angular/core';\r\nimport { Media, MediaContainer } from './media.model';\r\nimport { MediaService } from './media.service';\r\nexport declare class MediaComponent implements OnChanges {\r\n    protected mediaService: MediaService;\r\n    /**\r\n     * The media container can hold multiple media items, so that\r\n     * a specific media (by format) can be used or multiple media\r\n     * can be provided in a `srcset` so the browser will figure out\r\n     * the best media for the device.\r\n     */\r\n    container: MediaContainer;\r\n    /**\r\n     * if a media format is given, a media for the given format will be rendered\r\n     */\r\n    format: string;\r\n    /**\r\n     * A specific alt text for an image, which overrules the alt text\r\n     * from the container data.\r\n     */\r\n    alt: string;\r\n    /**\r\n     * Once the media is loaded, we emit an event.\r\n     */\r\n    loaded: EventEmitter<Boolean>;\r\n    /**\r\n     * The media contains the info for the UI to create the image. This media\r\n     * object might contain more info once other media types (i.e. video) is supported.\r\n     */\r\n    media: Media;\r\n    /**\r\n     * The `cx-media` component has an `is-initialized` class as long as the\r\n     * media is being initialized.\r\n     */\r\n    isInitialized: boolean;\r\n    /**\r\n     * The `cx-media` component has a `is-loading` class as long as the\r\n     * media is loaded. Wehn the media is loaded, the `is-initialized` class\r\n     * is added.\r\n     */\r\n    isLoading: boolean;\r\n    /**\r\n     * When there's no media provided for the content, or in case an error\r\n     * happened during loading, we add the `is-missing` class. Visual effects\r\n     * can be controlled by CSS.\r\n     */\r\n    isMissing: boolean;\r\n    constructor(mediaService: MediaService);\r\n    ngOnChanges(): void;\r\n    /**\r\n     * Creates the `Media` object\r\n     */\r\n    protected create(): void;\r\n    /**\r\n     * This handler is called from the UI when the image is loaded.\r\n     */\r\n    loadHandler(): void;\r\n    /**\r\n     * Whenever an error happens during load, we mark the component\r\n     * with css classes to have a missing media.\r\n     */\r\n    errorHandler(): void;\r\n    protected handleMissing(): void;\r\n}\r\n"]}