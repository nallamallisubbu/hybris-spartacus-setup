{"version":3,"file":"carousel.component.d.ts","sources":["carousel.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnInit, TemplateRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\r\nimport { CarouselService } from './carousel.service';\r\n/**\r\n * Generic carousel component that can be used to render any carousel items,\r\n * such as products, images, banners, or any component. Carousel items are\r\n * rendered in so-called carousel slides, and the previous/next buttons as well as\r\n * the indicator-buttons can used to navigate the slides.\r\n *\r\n * The component uses an array of Observables (`items$`) as an input, to allow\r\n * for lazy loading of items.\r\n *\r\n * The number of items per slide is calculated with the `itemWidth`, which can given\r\n * in pixels or percentage.\r\n *\r\n * To allow for flexible rendering of items, the rendering is delegated to the\r\n * given `template`. This allows for maximum flexibility.\r\n */\r\nexport declare class CarouselComponent implements OnInit {\r\n    protected el: ElementRef;\r\n    protected service: CarouselService;\r\n    /**\r\n     * The title is rendered as the carousel heading.\r\n     */\r\n    title: string;\r\n    /**\r\n     * The items$ represent the carousel items. The items$ are\r\n     * observables so that the items can be loaded on demand.\r\n     */\r\n    items: Observable<any>[];\r\n    set setItems(inputItems: Observable<any>[]);\r\n    /**\r\n     * The template is rendered for each item, so that the actual\r\n     * view can be given by the compoent that uses the `CarouselComponent`.\r\n     */\r\n    template: TemplateRef<any>;\r\n    /**\r\n     * Specifies the minimum size of the carousel item, either in px or %.\r\n     * This value is used for the calculation of numbers per carousel, so that\r\n     * the number of carousel items is dynamic. The calculation uses the `itemWidth`\r\n     * and the host element `clientWidth`, so that the carousel is reusable in\r\n     * different layouts (for example in a 50% grid).\r\n     */\r\n    itemWidth: string;\r\n    /**\r\n     * Indicates whether the visual indicators are used.\r\n     */\r\n    hideIndicators: boolean;\r\n    indicatorIcon: ICON_TYPE;\r\n    previousIcon: ICON_TYPE;\r\n    nextIcon: ICON_TYPE;\r\n    activeSlide: number;\r\n    size$: Observable<number>;\r\n    constructor(el: ElementRef, service: CarouselService);\r\n    ngOnInit(): void;\r\n}\r\n"]}