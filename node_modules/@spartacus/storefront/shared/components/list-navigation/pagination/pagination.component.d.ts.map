{"version":3,"file":"pagination.component.d.ts","sources":["pagination.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { PaginationModel } from '@spartacus/core';\r\nimport { PaginationBuilder } from './pagination.builder';\r\nimport { PaginationItem } from './pagination.model';\r\n/**\r\n * The `PaginationComponent` is a generic component that is used for\r\n * all lists in Spartacus that require pagination. The component supports\r\n * all common features, which can be configured or hidden by CSS.\r\n */\r\nexport declare class PaginationComponent {\r\n    private paginationBuilder;\r\n    private activatedRoute;\r\n    /** The (optional) pageRoute used for the anchor links created in the pagination   */\r\n    pageRoute: string;\r\n    /** The (optional) query parameter which is added to the page route.  */\r\n    queryParam: string;\r\n    /**\r\n     * Whenever there's a default page specified, the routing logic\r\n     * will omit the page number in routeLink or parameters.\r\n     */\r\n    defaultPage: any;\r\n    private _pagination;\r\n    get pagination(): PaginationModel;\r\n    set pagination(value: PaginationModel);\r\n    viewPageEvent: EventEmitter<number>;\r\n    pages: PaginationItem[];\r\n    constructor(paginationBuilder: PaginationBuilder, activatedRoute: ActivatedRoute);\r\n    private render;\r\n    /**\r\n     * Inidicates whether the given item is the current item.\r\n     *\r\n     * @param item PaginationItem\r\n     * @returns boolean\r\n     */\r\n    isCurrent(item: PaginationItem): boolean;\r\n    /**\r\n     * Indicates whether the pagination item is inactive. This is used\r\n     * to disabled a link or set the tabindex to `-1`.\r\n     *\r\n     * Defaults to true\r\n     *\r\n     * @param item PaginationItem\r\n     * @returns returns -1 in case of a disabled\r\n     */\r\n    isInactive(item: PaginationItem): boolean;\r\n    getQueryParams(item: PaginationItem): Params;\r\n    pageChange(page: PaginationItem): void;\r\n}\r\n"]}