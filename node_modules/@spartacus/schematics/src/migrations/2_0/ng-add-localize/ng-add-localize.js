"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const rxjs_1 = require("rxjs");
const constants_1 = require("../../../shared/constants");
const package_utils_1 = require("../../../shared/utils/package-utils");
function addPackageJsonDependencies() {
    return (tree, context) => {
        const angularVersion = package_utils_1.getAngularVersion(tree);
        const dependencies = [
            {
                type: dependencies_1.NodeDependencyType.Default,
                version: angularVersion,
                name: constants_1.ANGULAR_LOCALIZE,
            },
        ];
        dependencies.forEach((dependency) => {
            dependencies_1.addPackageJsonDependency(tree, dependency);
            context.logger.log('info', `✅️ Added '${dependency.name}' into ${dependency.type}`);
        });
        return tree;
    };
}
function installPackageJsonDependencies() {
    return (tree, context) => {
        context.addTask(new tasks_1.NodePackageInstallTask());
        context.logger.log('info', `🔍 Installing packages...`);
        return tree;
    };
}
function migrate() {
    return (tree, context) => {
        const angularLocalizeInstalled = package_utils_1.isAngularLocalizeInstalled(tree);
        if (angularLocalizeInstalled) {
            context.logger.info(`Skipping the installation of ${constants_1.ANGULAR_LOCALIZE} as it's already installed.`);
        }
        else {
            context.logger.warn(`Please run the following: ng add ${constants_1.ANGULAR_LOCALIZE}`);
        }
        return angularLocalizeInstalled
            ? rxjs_1.noop()
            : schematics_1.chain([addPackageJsonDependencies(), installPackageJsonDependencies()]);
    };
}
exports.migrate = migrate;
//# sourceMappingURL=ng-add-localize.js.map