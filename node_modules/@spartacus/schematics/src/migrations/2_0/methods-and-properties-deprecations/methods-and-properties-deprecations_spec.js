"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const testing_1 = require("@angular-devkit/core/node/testing");
const schematics_1 = require("@angular-devkit/schematics");
const testing_2 = require("@angular-devkit/schematics/testing");
const shx = __importStar(require("shelljs"));
const constants_1 = require("../../../shared/constants");
const test_utils_1 = require("../../../shared/utils/test-utils");
const methods_and_properties_deprecations_1 = require("./methods-and-properties-deprecations");
const MIGRATION_SCRIPT_NAME = 'migration-v2-methods-and-properties-deprecations-02';
const GET_COMPONENT_STATE_TEST_CLASS = `
    import { MemoizedSelector, select, Store } from '@ngrx/store';
    import {
      CmsSelectors,
      ComponentState,
      StateUtils,
      StateWithCms
    } from '@spartacus/core';
    import { Observable } from 'rxjs';

    export class TestClass {
      constructor(private store: Store<StateWithCms>) {}

      getComponentState1(): void {
        this.store
          .pipe(select(CmsSelectors.getComponentState))
          .subscribe();
      }

      getComponentState2(): Observable<StateUtils.EntityLoaderState<any>> {
        return this.store.pipe(select(CmsSelectors.getComponentState));
      }

      getComponentState3(): MemoizedSelector<StateWithCms, ComponentState> {
        return CmsSelectors.getComponentState;
      }
    }`;
const GET_COMPONENT_ENTITIES_TEST_CLASS = `
    import { MemoizedSelector, select, Store } from '@ngrx/store';
    import { CmsSelectors, StateWithCms } from '@spartacus/core';
    import { Observable } from 'rxjs';

    export class TestClass {
      constructor(private store: Store<StateWithCms>) {}

      getComponentEntities1(): void {
        this.store
          .pipe(select(CmsSelectors.getComponentEntities))
          .subscribe();
      }

      getComponentEntities2(): Observable<{ [id: string]: any }> {
        return this.store.pipe(select(CmsSelectors.getComponentEntities));
      }

      getComponentEntities3(): MemoizedSelector<
        StateWithCms,
        { [id: string]: any }
      > {
        return CmsSelectors.getComponentEntities;
      }
    }
`;
const COMPONENT_STATE_SELECTOR_FACTORY_TEST_CLASS = `
    import { MemoizedSelector, select, Store } from '@ngrx/store';
    import { CmsSelectors, StateUtils, StateWithCms } from '@spartacus/core';
    import { Observable } from 'rxjs';

    export class TestClass {
      constructor(private store: Store<StateWithCms>) {}

      componentStateSelectorFactory1(): void {
        this.store
          .pipe(select(CmsSelectors.componentStateSelectorFactory('sample-uid')))
          .subscribe();
      }

      componentStateSelectorFactory2(): Observable<StateUtils.LoaderState<any>> {
        return this.store.pipe(
          select(CmsSelectors.componentStateSelectorFactory('sample-uid'))
        );
      }

      componentStateSelectorFactory3(): MemoizedSelector<
        StateWithCms,
        StateUtils.LoaderState<any>
      > {
        return CmsSelectors.componentStateSelectorFactory('sample-uid');
      }
    }
`;
const COMPONENT_SELECTOR_FACTORY_TEST_CLASS = `
    import { MemoizedSelector, select, Store } from '@ngrx/store';
    import { CmsComponent, CmsSelectors, StateWithCms } from '@spartacus/core';
    import { Observable } from 'rxjs';

    export class TestClass {
      constructor(private store: Store<StateWithCms>) {}

      componentSelectorFactory1(): void {
        this.store
          .pipe(select(CmsSelectors.componentSelectorFactory('sample-uid')))
          .subscribe();
      }

      componentSelectorFactory2(): Observable<CmsComponent> {
        return this.store.pipe(
          select(CmsSelectors.componentSelectorFactory('sample-uid'))
        );
      }

      componentSelectorFactory3(): MemoizedSelector<StateWithCms, CmsComponent> {
        return CmsSelectors.componentSelectorFactory('sample-uid');
      }
    }
`;
const ACTION_CONST_TEST_NO_SPARTACUS_IMPORT_CLASS = `
    export class TestClass {
      constructor() {
        console.log(CmsActions.CMS_GET_COMPONENET_FROM_PAGE);
      }
    }
`;
const CMS_COMPONENT_ACTIONS_TEST_CLASS = `
    import { CmsActions } from '@spartacus/core';
    export class Test {
      loadCmsComponent(): void {
        console.log(new CmsActions.LoadCmsComponent('xxx'));
      }
      loadCmsComponentFail(): void {
        console.log(new CmsActions.LoadCmsComponentFail('xxx', 'xxx'));
      }
      loadCmsComponentSuccess(): void {
        console.log(new CmsActions.LoadCmsComponentSuccess({}, 'xxx'));
      }
      cmsGetComponentFromPage(): void {
        console.log(new CmsActions.CmsGetComponentFromPage([]));
      }
    }
`;
describe('updateCmsComponentState migration', () => {
    let host;
    let appTree = schematics_1.Tree.empty();
    let schematicRunner;
    let tmpDirPath;
    let previousWorkingDir;
    beforeEach(() => {
        schematicRunner = new testing_2.SchematicTestRunner('test', require.resolve('../../migrations.json'));
        host = new testing_1.TempScopedNodeJsSyncHost();
        appTree = new testing_2.UnitTestTree(new schematics_1.HostTree(host));
        test_utils_1.writeFile(host, '/tsconfig.json', JSON.stringify({
            compilerOptions: {
                lib: ['es2015'],
            },
        }));
        test_utils_1.writeFile(host, '/angular.json', JSON.stringify({
            projects: {
                'spartacus-test': {
                    sourceRoot: 'src',
                    test: {
                        architect: {
                            build: { options: { tsConfig: './tsconfig.json' } },
                        },
                    },
                },
            },
        }));
        previousWorkingDir = shx.pwd();
        tmpDirPath = core_1.getSystemPath(host.root);
        // Switch into the temporary directory path. This allows us to run
        // the schematic against our custom unit test tree.
        shx.cd(tmpDirPath);
    });
    afterEach(() => {
        shx.cd(previousWorkingDir);
        shx.rm('-r', tmpDirPath);
    });
    it('getComponentState', () => __awaiter(void 0, void 0, void 0, function* () {
        test_utils_1.writeFile(host, '/src/index.ts', GET_COMPONENT_STATE_TEST_CLASS);
        yield test_utils_1.runMigration(appTree, schematicRunner, MIGRATION_SCRIPT_NAME);
        const content = appTree.readContent('/src/index.ts');
        const regex = new RegExp(methods_and_properties_deprecations_1.buildMethodComment(constants_1.GET_COMPONENT_STATE_OLD_API, constants_1.GET_COMPONENTS_STATE_NEW_API), 'g');
        const commentOccurrences = (content.match(regex) || []).length;
        expect(commentOccurrences).toEqual(3);
    }));
    it('getComponentEntities', () => __awaiter(void 0, void 0, void 0, function* () {
        test_utils_1.writeFile(host, '/src/index.ts', GET_COMPONENT_ENTITIES_TEST_CLASS);
        yield test_utils_1.runMigration(appTree, schematicRunner, MIGRATION_SCRIPT_NAME);
        const content = appTree.readContent('/src/index.ts');
        const regex = new RegExp(`// TODO:Spartacus - '${constants_1.GET_COMPONENT_ENTITIES_OLD_API}' has been removed, please use some of the newer API methods.`, 'g');
        const commentOccurrences = (content.match(regex) || []).length;
        expect(commentOccurrences).toEqual(3);
    }));
    it('componentStateSelectorFactory', () => __awaiter(void 0, void 0, void 0, function* () {
        test_utils_1.writeFile(host, '/src/index.ts', COMPONENT_STATE_SELECTOR_FACTORY_TEST_CLASS);
        yield test_utils_1.runMigration(appTree, schematicRunner, MIGRATION_SCRIPT_NAME);
        const content = appTree.readContent('/src/index.ts');
        const regex = new RegExp(methods_and_properties_deprecations_1.buildMethodComment(constants_1.COMPONENT_STATE_SELECTOR_FACTORY_OLD_API, constants_1.COMPONENTS_STATE_SELECTOR_FACTORY_NEW_API), 'g');
        const commentOccurrences = (content.match(regex) || []).length;
        expect(commentOccurrences).toEqual(3);
    }));
    it('componentSelectorFactory', () => __awaiter(void 0, void 0, void 0, function* () {
        test_utils_1.writeFile(host, '/src/index.ts', COMPONENT_SELECTOR_FACTORY_TEST_CLASS);
        yield test_utils_1.runMigration(appTree, schematicRunner, MIGRATION_SCRIPT_NAME);
        const content = appTree.readContent('/src/index.ts');
        const regex = new RegExp(methods_and_properties_deprecations_1.buildMethodComment(constants_1.COMPONENT_SELECTOR_FACTORY_OLD_API, constants_1.COMPONENTS_SELECTOR_FACTORY_NEW_API), 'g');
        const commentOccurrences = (content.match(regex) || []).length;
        expect(commentOccurrences).toEqual(3);
    }));
    it('should NOT do the update if there is no Spartacus import present', () => __awaiter(void 0, void 0, void 0, function* () {
        test_utils_1.writeFile(host, '/src/index.ts', ACTION_CONST_TEST_NO_SPARTACUS_IMPORT_CLASS);
        yield test_utils_1.runMigration(appTree, schematicRunner, MIGRATION_SCRIPT_NAME);
        const content = appTree.readContent('/src/index.ts');
        const regexOld = new RegExp('CMS_GET_COMPONENET_FROM_PAGE', 'g');
        const oldOccurrences = (content.match(regexOld) || []).length;
        expect(oldOccurrences).toEqual(1);
        const regexNew = new RegExp('CMS_GET_COMPONENT_FROM_PAGE', 'g');
        const newOccurrences = (content.match(regexNew) || []).length;
        expect(newOccurrences).toEqual(0);
    }));
    it('should add comments for CMS component actions', () => __awaiter(void 0, void 0, void 0, function* () {
        test_utils_1.writeFile(host, '/src/index.ts', CMS_COMPONENT_ACTIONS_TEST_CLASS);
        yield test_utils_1.runMigration(appTree, schematicRunner, MIGRATION_SCRIPT_NAME);
        const content = appTree.readContent('/src/index.ts');
        const loadCmsComponentRegex = new RegExp(`^// TODO:Spartacus - please convert all the parameters to the 'payload' object's properties for '${constants_1.LOAD_CMS_COMPONENT_CLASS}' action$`, 'gm');
        const loadCmsComponentOccurrences = (content.match(loadCmsComponentRegex) || []).length;
        expect(loadCmsComponentOccurrences).toEqual(1);
        const loadCmsComponentFailRegex = new RegExp(`// TODO:Spartacus - please convert all the parameters to the 'payload' object's properties for '${constants_1.LOAD_CMS_COMPONENT_FAIL_CLASS}' action`, 'g');
        const loadCmsComponentFailOccurrences = (content.match(loadCmsComponentFailRegex) || []).length;
        expect(loadCmsComponentFailOccurrences).toEqual(1);
        const loadCmsComponentSuccessRegex = new RegExp(`// TODO:Spartacus - please convert all the parameters to the 'payload' object's properties for '${constants_1.LOAD_CMS_COMPONENT_SUCCESS_CLASS}' action`, 'g');
        const loadCmsComponentSuccessOccurrences = (content.match(loadCmsComponentSuccessRegex) || []).length;
        expect(loadCmsComponentSuccessOccurrences).toEqual(1);
        const cmsGetComponentFromPageRegex = new RegExp(`// TODO:Spartacus - please convert all the parameters to the 'payload' object's properties for '${constants_1.CMS_GET_COMPONENT_FROM_PAGE}' action`, 'g');
        const cmsGetComponentFromPageRegexOccurrences = (content.match(cmsGetComponentFromPageRegex) || []).length;
        expect(cmsGetComponentFromPageRegexOccurrences).toEqual(1);
    }));
});
//# sourceMappingURL=methods-and-properties-deprecations_spec.js.map