"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const testing_1 = require("@angular-devkit/core/node/testing");
const schematics_1 = require("@angular-devkit/schematics");
const testing_2 = require("@angular-devkit/schematics/testing");
const shx = __importStar(require("shelljs"));
const constants_1 = require("../../../shared/constants");
const test_utils_1 = require("../../../shared/utils/test-utils");
const MIGRATION_SCRIPT_NAME = 'migration-v2-config-deprecations-09';
const TEST_CLASS = `
const config = {
  features: {
    level: '1.5',
    anonymousConsents: true
  }
};

@NgModule({
  imports: [
    B2cStorefrontModule.withConfig({
      features: {
        level: '1.5',
        anonymousConsents: true
      }
    }),
  ],
  providers: [
    provideConfig(config),
    provideConfig({
      features: {
        level: '1.5',
        anonymousConsents: true
      }
    }),
  ]
})
export class AppModule {}
`;
describe('config deprecations migration', () => {
    let host;
    let appTree = schematics_1.Tree.empty();
    let schematicRunner;
    let tmpDirPath;
    let previousWorkingDir;
    beforeEach(() => {
        schematicRunner = new testing_2.SchematicTestRunner('test', require.resolve('../../migrations.json'));
        host = new testing_1.TempScopedNodeJsSyncHost();
        appTree = new testing_2.UnitTestTree(new schematics_1.HostTree(host));
        test_utils_1.writeFile(host, '/tsconfig.json', JSON.stringify({
            compilerOptions: {
                lib: ['es2015'],
            },
        }));
        test_utils_1.writeFile(host, '/angular.json', JSON.stringify({
            projects: {
                'spartacus-test': {
                    sourceRoot: 'src',
                    test: {
                        architect: {
                            build: { options: { tsConfig: './tsconfig.json' } },
                        },
                    },
                },
            },
        }));
        previousWorkingDir = shx.pwd();
        tmpDirPath = core_1.getSystemPath(host.root);
        // Switch into the temporary directory path. This allows us to run
        // the schematic against our custom unit test tree.
        shx.cd(tmpDirPath);
    });
    afterEach(() => {
        shx.cd(previousWorkingDir);
        shx.rm('-r', tmpDirPath);
    });
    it('migrate', () => __awaiter(void 0, void 0, void 0, function* () {
        test_utils_1.writeFile(host, '/src/index.ts', TEST_CLASS);
        yield test_utils_1.runMigration(appTree, schematicRunner, MIGRATION_SCRIPT_NAME);
        const content = appTree.readContent('/src/index.ts');
        const regex = new RegExp(`// ${constants_1.TODO_SPARTACUS} '${constants_1.ANONYMOUS_CONSENTS}' has been removed, as this feature is now enabled by default.\n`, 'g');
        const commentOccurrences = (content.match(regex) || []).length;
        expect(commentOccurrences).toEqual(3);
    }));
});
//# sourceMappingURL=config-deprecation_spec.js.map