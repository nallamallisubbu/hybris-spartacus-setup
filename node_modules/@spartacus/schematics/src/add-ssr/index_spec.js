"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const schema_1 = require("@angular/cli/lib/config/schema");
const path = __importStar(require("path"));
const constants_1 = require("../shared/constants");
const file_utils_1 = require("../shared/utils/file-utils");
const collectionPath = path.join(__dirname, '../collection.json');
describe('add-ssr', () => {
    const schematicRunner = new testing_1.SchematicTestRunner('schematics', collectionPath);
    let appTree;
    const workspaceOptions = {
        name: 'workspace',
        version: '0.5.0',
    };
    const appOptions = {
        name: 'schematics-test',
        inlineStyle: false,
        inlineTemplate: false,
        routing: false,
        style: schema_1.Style.Scss,
        skipTests: false,
        projectRoot: '',
    };
    const defaultOptions = {
        project: 'schematics-test',
        baseSite: 'electronics',
        baseUrl: 'https://localhost:9002',
    };
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions)
            .toPromise();
        appTree = yield schematicRunner
            .runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree)
            .toPromise();
        appTree = yield schematicRunner
            .runSchematicAsync('add-spartacus', defaultOptions, appTree)
            .toPromise();
        appTree = yield schematicRunner
            .runSchematicAsync('add-ssr', defaultOptions, appTree)
            .toPromise();
    }));
    describe('package.json', () => {
        it('should add SSR dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
            const packageJson = appTree.readContent('/package.json');
            const packageObj = JSON.parse(packageJson);
            const depPackageList = Object.keys(packageObj.dependencies);
            expect(depPackageList.includes('@angular/platform-server')).toBe(true);
            expect(depPackageList.includes('@nguniversal/express-engine')).toBe(true);
        }));
        it('should contain additional build scripts', () => __awaiter(void 0, void 0, void 0, function* () {
            const buffer = appTree.read('package.json');
            expect(buffer).toBeTruthy();
            if (buffer) {
                const packageJsonFileObject = JSON.parse(buffer.toString(constants_1.UTF_8));
                expect(packageJsonFileObject.scripts['build:ssr']).toBeTruthy();
                expect(packageJsonFileObject.scripts['serve:ssr']).toBeTruthy();
            }
        }));
    });
    describe('app.server.module.ts', () => {
        it('should contain ServerTransferStateModule import', () => __awaiter(void 0, void 0, void 0, function* () {
            const appServerModulePath = file_utils_1.getPathResultsForFile(appTree, 'app.server.module.ts', '/src')[0];
            const buffer = appTree.read(appServerModulePath);
            expect(buffer).toBeTruthy();
            if (buffer) {
                const appServerModule = buffer.toString(constants_1.UTF_8);
                expect(appServerModule.includes('ServerTransferStateModule')).toBeTruthy();
                expect(appServerModule.includes('@angular/platform-server')).toBeTruthy();
            }
        }));
    });
    describe('index.html', () => {
        it('should contain occ-backend-base-url attribute in meta tags', () => __awaiter(void 0, void 0, void 0, function* () {
            const indexHtmlPath = file_utils_1.getPathResultsForFile(appTree, 'index.html', '/src')[0];
            const buffer = appTree.read(indexHtmlPath);
            expect(buffer).toBeTruthy();
            if (buffer) {
                const indexHtmlFile = buffer.toString(constants_1.UTF_8);
                expect(indexHtmlFile.includes('meta name="occ-backend-base-url"')).toBeTruthy();
            }
        }));
    });
    describe('app.module.ts', () => {
        it('should contain BrowserTransferStateModule import', () => __awaiter(void 0, void 0, void 0, function* () {
            const appModulePath = file_utils_1.getPathResultsForFile(appTree, 'app.module.ts', '/src')[0];
            const buffer = appTree.read(appModulePath);
            expect(buffer).toBeTruthy();
            if (buffer) {
                const appModule = buffer.toString('utf-8');
                expect(appModule.includes('BrowserTransferStateModule')).toBeTruthy();
                expect(appModule.includes('@angular/platform-browser')).toBeTruthy();
            }
        }));
    });
});
//# sourceMappingURL=index_spec.js.map