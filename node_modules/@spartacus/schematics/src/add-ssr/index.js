"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const schematics_2 = require("@angular/cdk/schematics");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const constants_1 = require("../shared/constants");
const file_utils_1 = require("../shared/utils/file-utils");
const module_file_utils_1 = require("../shared/utils/module-file-utils");
const package_utils_1 = require("../shared/utils/package-utils");
const workspace_utils_1 = require("../shared/utils/workspace-utils");
function addPackageJsonDependencies() {
    return (tree, context) => {
        const angularVersion = package_utils_1.getAngularVersion(tree);
        const dependencies = [
            {
                type: dependencies_1.NodeDependencyType.Default,
                version: angularVersion,
                name: '@angular/platform-server',
            },
            {
                type: dependencies_1.NodeDependencyType.Default,
                version: constants_1.ANGULAR_UNIVERSAL_EXPRESS_VERSION,
                name: '@nguniversal/express-engine',
            },
            {
                type: dependencies_1.NodeDependencyType.Dev,
                version: '^6.0.4',
                name: 'ts-loader',
            },
        ];
        dependencies.forEach((dependency) => {
            dependencies_1.addPackageJsonDependency(tree, dependency);
            context.logger.log('info', `✅️ Added '${dependency.name}' into ${dependency.type}`);
        });
        return tree;
    };
}
function installPackageJsonDependencies() {
    return (tree, context) => {
        context.addTask(new tasks_1.NodePackageInstallTask());
        context.logger.log('info', `🔍 Installing packages...`);
        return tree;
    };
}
function modifyAppServerModuleFile() {
    return (tree, context) => {
        const appServerModulePath = file_utils_1.getPathResultsForFile(tree, 'app.server.module.ts', '/src')[0];
        if (!appServerModulePath) {
            throw new schematics_1.SchematicsException(`Project file "app.server.module.ts" not found.`);
        }
        module_file_utils_1.addImport(tree, appServerModulePath, 'ServerTransferStateModule', '@angular/platform-server');
        module_file_utils_1.addToModuleImportsAndCommitChanges(tree, appServerModulePath, `ServerTransferStateModule`);
        context.logger.log('info', `✅️ Modified app.server.module.ts file.`);
        return tree;
    };
}
function modifyIndexHtmlFile(project, options) {
    return (tree) => {
        const buffer = tree.read('src/index.html');
        if (buffer) {
            const indexContent = buffer.toString();
            if (!indexContent.includes('<meta name="occ-backend-base-url"')) {
                const projectIndexHtmlPath = file_utils_1.getIndexHtmlPath(project);
                const baseUrl = options.baseUrl || 'OCC_BACKEND_BASE_URL_VALUE';
                const metaTags = [
                    `<meta name="occ-backend-base-url" content="${baseUrl}" />`,
                ];
                metaTags.forEach((metaTag) => {
                    schematics_2.appendHtmlElementToHead(tree, projectIndexHtmlPath, metaTag);
                });
            }
        }
        return tree;
    };
}
function provideServerFile(options) {
    return schematics_1.apply(schematics_1.url('./files'), [
        schematics_1.template(Object.assign(Object.assign(Object.assign({}, core_1.strings), options), { typescriptExt: 'ts', browserDistDirectory: `dist/${options.project}/browser` })),
        schematics_1.move('.'),
    ]);
}
function modifyAppModuleFile() {
    return (tree, context) => {
        const appModulePath = file_utils_1.getPathResultsForFile(tree, 'app.module.ts', '/src')[0];
        if (!appModulePath) {
            throw new schematics_1.SchematicsException(`Project file "app.module.ts" not found.`);
        }
        const moduleSource = file_utils_1.getTsSourceFile(tree, appModulePath);
        if (!ast_utils_1.isImported(moduleSource, 'BrowserTransferStateModule', constants_1.ANGULAR_PLATFORM_BROWSER)) {
            module_file_utils_1.addImport(tree, appModulePath, 'BrowserTransferStateModule', constants_1.ANGULAR_PLATFORM_BROWSER);
            module_file_utils_1.addToModuleImportsAndCommitChanges(tree, appModulePath, `BrowserTransferStateModule`);
        }
        context.logger.log('info', `✅️ Modified app.module.ts file.`);
        return tree;
    };
}
function addSSR(options) {
    return (tree, context) => {
        const project = workspace_utils_1.getProjectFromWorkspace(tree, options);
        const serverTemplate = provideServerFile(options);
        return schematics_1.chain([
            addPackageJsonDependencies(),
            schematics_1.externalSchematic('@nguniversal/express-engine', 'ng-add', {
                clientProject: options.project,
            }),
            modifyAppServerModuleFile(),
            modifyIndexHtmlFile(project, options),
            schematics_1.branchAndMerge(schematics_1.chain([schematics_1.mergeWith(serverTemplate, schematics_1.MergeStrategy.Overwrite)]), schematics_1.MergeStrategy.Overwrite),
            modifyAppModuleFile(),
            installPackageJsonDependencies(),
            schematics_1.externalSchematic(constants_1.ANGULAR_LOCALIZE, 'ng-add', {}),
        ])(tree, context);
    };
}
exports.addSSR = addSSR;
//# sourceMappingURL=index.js.map