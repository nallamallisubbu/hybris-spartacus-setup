"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const DEFAULT_POSSIBLE_PROJECT_FILES = ['/angular.json', '/.angular.json'];
function getSourceRoot(host, options = {}) {
    const workspace = getWorkspace(host).workspace;
    if (!options.project) {
        options.project = getDefaultProjectNameFromWorkspace(host);
    }
    const sourceRoot = workspace.projects[options.project].sourceRoot;
    if (!sourceRoot) {
        throw new schematics_1.SchematicsException('No default project found');
    }
    return sourceRoot;
}
exports.getSourceRoot = getSourceRoot;
function getWorkspace(host, files = DEFAULT_POSSIBLE_PROJECT_FILES) {
    const angularJson = getAngularJsonFile(host, files);
    const path = files.filter((filePath) => host.exists(filePath))[0];
    return {
        path,
        workspace: angularJson,
    };
}
exports.getWorkspace = getWorkspace;
function getAngularJsonFile(tree, possibleProjectFiles = DEFAULT_POSSIBLE_PROJECT_FILES) {
    const path = possibleProjectFiles.filter((filePath) => tree.exists(filePath))[0];
    if (!path) {
        throw new schematics_1.SchematicsException(`Could not find Angular`);
    }
    const configBuffer = tree.read(path);
    if (configBuffer === null) {
        throw new schematics_1.SchematicsException(`Could not find (${path})`);
    }
    const angularJsonContent = configBuffer.toString();
    return core_1.parseJson(angularJsonContent, core_1.JsonParseMode.Loose);
}
function getProjectFromWorkspace(tree, options, files = DEFAULT_POSSIBLE_PROJECT_FILES) {
    const { workspace } = getWorkspace(tree, files);
    if (!options.project) {
        throw new schematics_1.SchematicsException('Option "project" is required.');
    }
    const project = workspace.projects[options.project];
    if (!project) {
        throw new schematics_1.SchematicsException(`Project is not defined in this workspace.`);
    }
    if (project.projectType !== 'application') {
        throw new schematics_1.SchematicsException(`Spartacus requires a project type of "application".`);
    }
    return project;
}
exports.getProjectFromWorkspace = getProjectFromWorkspace;
function getDefaultProjectNameFromWorkspace(tree) {
    const workspace = getWorkspace(tree).workspace;
    return workspace.defaultProject !== undefined
        ? workspace.defaultProject
        : Object.keys(workspace.projects)[0];
}
exports.getDefaultProjectNameFromWorkspace = getDefaultProjectNameFromWorkspace;
//# sourceMappingURL=workspace-utils.js.map